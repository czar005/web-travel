// Enhanced Content Updater with proper saving
class EnhancedContentUpdater {
    constructor() {
        this.initialized = false;
        this.init();
    }

    init() {
        console.log('üöÄ Enhanced Content Updater initialized');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DataManager
        this.waitForDataManager();
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        window.addEventListener('dataUpdated', (e) => {
            console.log('üì¢ Data update event received', e.detail);
            this.applyChanges();
        });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setInterval(() => this.applyChanges(), 3000);
    }

    waitForDataManager() {
        if (window.dataManager) {
            this.applyChanges();
            this.initialized = true;
        } else {
            setTimeout(() => this.waitForDataManager(), 100);
        }
    }

    applyChanges() {
        if (!window.dataManager) {
            console.log('‚è≥ Waiting for DataManager...');
            return;
        }

        const data = window.dataManager.getData();
        if (!data) {
            console.log('üì≠ No data available');
            return;
        }

        console.log('üîÑ Applying changes to page...');
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        this.applyContentChanges(data.content);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        this.applyContactChanges(data.contacts);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.applySettingsChanges(data.settings);
        
        console.log('‚úÖ Changes applied successfully');
    }

    applyContentChanges(content) {
        if (!content) return;

        // Hero section
        if (content.hero) {
            this.updateText('#home h1, .hero h1', content.hero.title);
            this.updateText('#home p, .hero p', content.hero.subtitle);
        }

        // About section
        if (content.about) {
            this.updateText('#about .section-title', content.about.title);
            this.updateText('.about-text p', content.about.description);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
            if (content.about.stats) {
                this.updateStats(content.about.stats);
            }
        }

        // Services section
        if (content.services) {
            this.updateText('#services .section-title', content.services.title);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (content.services.services) {
                this.updateServices(content.services.services);
            }
        }

        // Destinations section
        if (content.destinations) {
            this.updateText('#destinations .section-title', content.destinations.title);
            this.updateText('.destinations .section-subtitle', content.destinations.subtitle);
        }

        // Contact section
        if (content.contact) {
            this.updateText('#contact .section-title', content.contact.title);
        }

        // Footer section
        if (content.footer) {
            this.updateText('.footer-section:first-child p', content.footer.description);
            this.updateHTML('.footer-bottom p', content.footer.copyright);
        }
    }

    applyContactChanges(contacts) {
        if (!contacts) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if (contacts.phone) {
            this.updateContactItem('–¢–µ–ª–µ—Ñ–æ–Ω', contacts.phone);
        }
        if (contacts.email) {
            this.updateContactItem('Email', contacts.email);
        }
        if (contacts.address) {
            this.updateContactItem('–ê–¥—Ä–µ—Å', contacts.address);
        }
        if (contacts.hours) {
            this.updateContactItem('–ß–∞—Å—ã', contacts.hours);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ñ—É—Ç–µ—Ä–µ
        this.updateFooterContacts(contacts);
    }

    applySettingsChanges(settings) {
        if (!settings) return;

        if (settings.siteTitle) {
            document.title = settings.siteTitle;
        }
    }

    updateText(selector, text) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
            if (el.textContent !== text) {
                el.textContent = text;
            }
        });
    }

    updateHTML(selector, html) {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
            if (el.innerHTML !== html) {
                el.innerHTML = html;
            }
        });
    }

    updateContactItem(type, value) {
        const contactItems = document.querySelectorAll('.contact-item');
        contactItems.forEach(item => {
            const strong = item.querySelector('strong');
            if (strong && strong.textContent.includes(type)) {
                const p = item.querySelector('p');
                if (p && p.textContent !== value) {
                    p.textContent = value;
                }
            }
        });
    }

    updateFooterContacts(contacts) {
        const footerSection = document.querySelector('.footer-section:nth-child(3)');
        if (!footerSection) return;

        const paragraphs = footerSection.querySelectorAll('p');
        
        if (paragraphs.length >= 4) {
            if (contacts.phone && !paragraphs[0].textContent.includes(contacts.phone)) {
                paragraphs[0].innerHTML = `<i class="fas fa-phone"></i> ${contacts.phone}`;
            }
            if (contacts.email && !paragraphs[1].textContent.includes(contacts.email)) {
                paragraphs[1].innerHTML = `<i class="fas fa-envelope"></i> ${contacts.email}`;
            }
            if (contacts.address && !paragraphs[2].textContent.includes(contacts.address)) {
                paragraphs[2].innerHTML = `<i class="fas fa-map-marker-alt"></i> ${contacts.address}`;
            }
            if (contacts.hours && !paragraphs[3].textContent.includes(contacts.hours)) {
                paragraphs[3].innerHTML = `<i class="fas fa-clock"></i> ${contacts.hours}`;
            }
        }
    }

    updateStats(stats) {
        const statElements = document.querySelectorAll('.stat');
        if (statElements.length >= stats.length) {
            stats.forEach((stat, index) => {
                if (statElements[index]) {
                    const valueElement = statElements[index].querySelector('h3');
                    const labelElement = statElements[index].querySelector('p');
                    
                    if (valueElement && valueElement.textContent !== stat.value) {
                        valueElement.textContent = stat.value;
                    }
                    if (labelElement && labelElement.textContent !== stat.label) {
                        labelElement.textContent = stat.label;
                    }
                }
            });
        }
    }

    updateServices(services) {
        const serviceCards = document.querySelectorAll('.service-card');
        if (serviceCards.length >= services.length) {
            services.forEach((service, index) => {
                if (serviceCards[index]) {
                    const titleElement = serviceCards[index].querySelector('h3');
                    const descElement = serviceCards[index].querySelector('p');
                    const iconElement = serviceCards[index].querySelector('.service-icon i');
                    
                    if (titleElement && titleElement.textContent !== service.title) {
                        titleElement.textContent = service.title;
                    }
                    if (descElement && descElement.textContent !== service.description) {
                        descElement.textContent = service.description;
                    }
                    if (iconElement && service.icon && iconElement.className !== service.icon) {
                        iconElement.className = service.icon;
                    }
                }
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
new EnhancedContentUpdater();
