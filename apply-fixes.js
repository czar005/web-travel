console.log('üîß Applying enhanced editor fixes...');

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function waitForEditor() {
    if (window.editor) {
        console.log('‚úÖ Editor found, applying fixes...');
        applyEditorFixes();
    } else {
        setTimeout(waitForEditor, 100);
    }
}

function applyEditorFixes() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const originalShowContentEditor = window.editor.showContentEditor;
    window.editor.showContentEditor = function() {
        originalShowContentEditor.call(this);
        setTimeout(() => this.enhanceImageFields(), 50);
    };

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    window.editor.enhanceImageFields = function() {
        const contentEditor = document.getElementById('content-editor');
        if (!contentEditor) return;

        const imageFields = contentEditor.querySelectorAll('[data-field*="image"]');
        imageFields.forEach(field => {
            this.createImageManager(field);
        });
    };

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—è
    window.editor.createImageManager = function(field) {
        const fieldId = field.getAttribute('data-field');
        const currentValue = field.value;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä
        if (field.nextElementSibling && field.nextElementSibling.classList.contains('image-manager')) {
            return;
        }

        const managerHTML = `
            <div class="image-manager" style="margin: 10px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 2px solid #e9ecef;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                    <strong style="color: #2c5aa0;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º</strong>
                    <div>
                        <button type="button" class="btn-admin" onclick="window.editor.uploadImage('${fieldId}')" style="background: #17a2b8; margin-right: 5px;">
                            <i class="fas fa-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å
                        </button>
                        <button type="button" class="btn-admin" onclick="window.editor.setImageUrl('${fieldId}')" style="background: #6c757d; margin-right: 5px;">
                            <i class="fas fa-link"></i> URL
                        </button>
                        ${currentValue ? `
                        <button type="button" class="btn-admin danger" onclick="window.editor.removeImage('${fieldId}')" style="background: #dc3545;">
                            <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                        </button>
                        ` : ''}
                    </div>
                </div>
                <div class="image-preview" style="width: 100%; max-width: 300px; height: 200px; border: 2px dashed #ddd; border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; overflow: hidden; background: white;">
                    ${currentValue ? 
                        `<img src="${currentValue}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;">` :
                        `<div style="text-align: center; color: #666;">
                            <i class="fas fa-image" style="font-size: 2em; display: block; margin-bottom: 5px;"></i>
                            <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</span>
                        </div>`
                    }
                </div>
                ${currentValue ? `
                <div style="font-size: 12px; color: #666; background: white; padding: 8px; border-radius: 4px;">
                    <strong>–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong><br>
                    <span style="word-break: break-all;">${currentValue}</span>
                </div>
                ` : ''}
            </div>
        `;

        field.insertAdjacentHTML('afterend', managerHTML);
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    window.editor.uploadImage = function(fieldId) {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if (file.size > 5 * 1024 * 1024) {
                    this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB', 'error');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    this.updateImageField(fieldId, e.target.result);
                    this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'success');
                };
                reader.onerror = () => {
                    this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
                };
                reader.readAsDataURL(file);
            }
        };
        input.click();
    };

    window.editor.setImageUrl = function(fieldId) {
        const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
        if (url) {
            if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('data:image')) {
                this.updateImageField(fieldId, url);
                this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
            } else {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            }
        }
    };

    window.editor.removeImage = function(fieldId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?')) {
            this.updateImageField(fieldId, '');
            this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
        }
    };

    window.editor.updateImageField = function(fieldId, url) {
        const field = document.querySelector(`[data-field="${fieldId}"]`);
        if (field) {
            field.value = url;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
            const manager = field.nextElementSibling;
            if (manager && manager.classList.contains('image-manager')) {
                const preview = manager.querySelector('.image-preview');
                const currentImageInfo = manager.querySelector('div:last-child');
                
                if (preview) {
                    if (url) {
                        preview.innerHTML = `<img src="${url}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;">`;
                    } else {
                        preview.innerHTML = `
                            <div style="text-align: center; color: #666;">
                                <i class="fas fa-image" style="font-size: 2em; display: block; margin-bottom: 5px;"></i>
                                <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</span>
                            </div>
                        `;
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                if (currentImageInfo) {
                    if (url) {
                        currentImageInfo.innerHTML = `
                            <strong>–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong><br>
                            <span style="word-break: break-all;">${url}</span>
                        `;
                        currentImageInfo.style.display = 'block';
                    } else {
                        currentImageInfo.style.display = 'none';
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                const buttonsContainer = manager.querySelector('div:first-child div');
                if (buttonsContainer) {
                    if (url) {
                        if (!buttonsContainer.querySelector('.btn-admin.danger')) {
                            const deleteBtn = document.createElement('button');
                            deleteBtn.className = 'btn-admin danger';
                            deleteBtn.style.background = '#dc3545';
                            deleteBtn.style.marginRight = '5px';
                            deleteBtn.innerHTML = '<i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å';
                            deleteBtn.onclick = () => this.removeImage(fieldId);
                            buttonsContainer.appendChild(deleteBtn);
                        }
                    } else {
                        const deleteBtn = buttonsContainer.querySelector('.btn-admin.danger');
                        if (deleteBtn) {
                            deleteBtn.remove();
                        }
                    }
                }
            }
            
            this.hasUnsavedChanges = true;
        }
    };

    console.log('‚úÖ Editor fixes applied successfully');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
waitForEditor();
