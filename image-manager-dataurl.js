// Image Manager with Data URL support - —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É Blob URL
function ImageManagerDataURL() {
    this.maxFileSize = 2 * 1024 * 1024; // 2MB –¥–ª—è Data URL
    this.supportedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    this.init();
}

ImageManagerDataURL.prototype.init = function() {
    console.log('üñºÔ∏è Image Manager with Data URL initialized');
    this.integrateWithEditor();
};

ImageManagerDataURL.prototype.integrateWithEditor = function() {
    const checkEditor = () => {
        if (window.editor) {
            this.patchEditorMethods();
            console.log('‚úÖ Image Manager integrated with editor');
        } else {
            setTimeout(checkEditor, 100);
        }
    };
    checkEditor();
};

ImageManagerDataURL.prototype.patchEditorMethods = function() {
    const self = this;
    
    // –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –≤–µ—Ä—Å–∏—é —Å Data URL
    if (window.editor.uploadImage) {
        window.editor.uploadImage = function(fieldId) {
            self.uploadImageAsDataURL(fieldId);
        };
    }
    
    // –£–ª—É—á—à–∞–µ–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ URL
    if (window.editor.setImageUrl) {
        const originalSetImageUrl = window.editor.setImageUrl;
        window.editor.setImageUrl = function(fieldId) {
            self.setImageUrlEnhanced(fieldId, originalSetImageUrl);
        };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Blob URL –≤ Data URL
    this.convertExistingBlobUrls();
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Blob URL –≤ Data URL
ImageManagerDataURL.prototype.convertExistingBlobUrls = function() {
    if (!window.editor || !window.editor.currentData) return;
    
    let converted = false;
    const data = window.editor.currentData;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Blob URL
    const convertBlobUrlsInObject = (obj) => {
        if (!obj || typeof obj !== 'object') return;
        
        Object.keys(obj).forEach(key => {
            const value = obj[key];
            if (typeof value === 'string' && value.startsWith('blob:')) {
                console.log('üîÑ Converting blob URL to placeholder:', value);
                obj[key] = 'images/travel-placeholder.svg';
                converted = true;
            } else if (typeof value === 'object') {
                convertBlobUrlsInObject(value);
            }
        });
    };
    
    convertBlobUrlsInObject(data);
    
    if (converted) {
        console.log('‚úÖ Converted blob URLs in data');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (window.editor.saveData) {
            window.editor.saveData();
        }
    }
};

ImageManagerDataURL.prototype.uploadImageAsDataURL = function(fieldId) {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = this.supportedFormats.join(',');
    
    input.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file)) {
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Data URL
        const reader = new FileReader();
        
        reader.onload = (e) => {
            const dataUrl = e.target.result;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            if (window.editor && window.editor.updateImageField) {
                window.editor.updateImageField(fieldId, dataUrl);
            }
            
            this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–∫ Data URL', 'success');
        };
        
        reader.onerror = () => {
            this.showNotification('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
        };
        
        reader.readAsDataURL(file);
    };
    
    input.click();
};

ImageManagerDataURL.prototype.validateFile = function(file) {
    if (!this.supportedFormats.includes(file.type)) {
        this.showNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG, GIF –∏–ª–∏ WebP.', 'error');
        return false;
    }
    
    if (file.size > this.maxFileSize) {
        this.showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(this.maxFileSize)}.`, 'error');
        return false;
    }
    
    return true;
};

ImageManagerDataURL.prototype.setImageUrlEnhanced = function(fieldId, originalMethod) {
    const currentValue = this.getCurrentImageValue(fieldId);
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - Blob URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (currentValue && currentValue.startsWith('blob:')) {
        if (!confirm('–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π Blob URL. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            return;
        }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –Ω–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentValue || '');
    
    if (url === null) return;
    
    if (url === '') {
        if (window.editor && window.editor.removeImage) {
            window.editor.removeImage(fieldId);
        }
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (this.validateImageUrl(url)) {
        if (window.editor && window.editor.updateImageField) {
            window.editor.updateImageField(fieldId, url);
        }
        this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    } else {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
    }
};

ImageManagerDataURL.prototype.validateImageUrl = function(url) {
    try {
        // –î–ª—è data URL –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã
        if (url.startsWith('data:image')) return true;
        
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö URL –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (url.startsWith('http://') || url.startsWith('https://')) {
            new URL(url);
            return true;
        }
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if (url.startsWith('/') || url.startsWith('images/') || url.startsWith('./')) {
            return true;
        }
        
        return false;
    } catch {
        return false;
    }
};

ImageManagerDataURL.prototype.getCurrentImageValue = function(fieldId) {
    const field = document.querySelector(`[data-field="${fieldId}"]`);
    return field ? field.value : '';
};

ImageManagerDataURL.prototype.formatFileSize = function(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

ImageManagerDataURL.prototype.showNotification = function(message, type) {
    if (window.editor && window.editor.showNotification) {
        window.editor.showNotification(message, type);
    } else {
        console.log(`${type === 'error' ? '‚ùå' : '‚úÖ'} ${message}`);
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Blob URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
ImageManagerDataURL.prototype.cleanupBlobUrls = function() {
    // –†–µ–≤–æ–∫–∞–µ–º –≤—Å–µ Blob URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.querySelectorAll('img[src^="blob:"]').forEach(img => {
        try {
            URL.revokeObjectURL(img.src);
            img.src = 'images/travel-placeholder.svg';
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–≤–æ–∫–∞
        }
    });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new ImageManagerDataURL();
    });
} else {
    new ImageManagerDataURL();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ImageManagerDataURL = ImageManagerDataURL;
