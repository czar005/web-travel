// –°—É–ø–µ—Ä-—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
class SuperEditor {
    constructor() {
        this.init();
    }

    init() {
        console.log('üöÄ Super Editor initialized');
        this.patchExistingEditor();
        this.addImageManagement();
        this.addDynamicBlocks();
    }

    patchExistingEditor() {
        if (!window.editor) {
            setTimeout(() => this.patchExistingEditor(), 100);
            return;
        }

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º showContentEditor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        const originalShowContentEditor = window.editor.showContentEditor;
        window.editor.showContentEditor = function() {
            originalShowContentEditor.call(this);
            this.addEnhancedFeatures();
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.editor.addEnhancedFeatures = function() {
            this.addImageUploader();
            this.addDynamicBlocksManager();
            this.addContactEditor();
        };

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        window.editor.addImageUploader = function() {
            if (!this.currentSection) return;

            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏
            const hasImageField = this.currentSection.fields?.some(field => field.type === 'image');
            if (!hasImageField) return;

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!contentEditor.querySelector('.image-manager-enhanced')) {
                const imageField = this.currentSection.fields.find(field => field.type === 'image');
                if (imageField) {
                    const imageManagerHTML = this.createImageManagerHTML(imageField);
                    
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    const titleField = contentEditor.querySelector('[data-field="title"]');
                    if (titleField) {
                        titleField.closest('.form-group').insertAdjacentHTML('afterend', imageManagerHTML);
                    }
                }
            }
        };

        // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        window.editor.createImageManagerHTML = function(field) {
            const currentImage = this.getCurrentValue(field);
            
            return `
                <div class="image-manager-enhanced" style="margin: 20px 0;">
                    <div class="form-group">
                        <label>${field.label}:</label>
                        <div class="image-preview-container" style="margin: 15px 0;">
                            <div class="image-preview-enhanced ${!currentImage ? 'empty' : ''}" 
                                 style="width: 100%; max-width: 400px; height: 250px; border: 2px dashed #ddd; border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-bottom: 15px; overflow: hidden; background: #f8f9fa;">
                                ${currentImage ? 
                                    `<img src="${currentImage}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;">` :
                                    `<div style="text-align: center; color: #666;">
                                        <i class="fas fa-image" style="font-size: 3em; margin-bottom: 10px; display: block;"></i>
                                        <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</span>
                                     </div>`
                                }
                            </div>
                            <div class="image-actions-enhanced" style="display: flex; gap: 10px; flex-wrap: wrap;">
                                <button type="button" class="btn-admin" onclick="window.editor.uploadImage('${field.id}')" 
                                        style="background: #17a2b8; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;">
                                    <i class="fas fa-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                </button>
                                <button type="button" class="btn-admin" onclick="window.editor.setImageUrl('${field.id}')" 
                                        style="background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;">
                                    <i class="fas fa-link"></i> –£–∫–∞–∑–∞—Ç—å URL
                                </button>
                                ${currentImage ? `
                                <button type="button" class="btn-admin danger" onclick="window.editor.removeImage('${field.id}')" 
                                        style="background: #dc3545; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;">
                                    <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                </button>
                                ` : ''}
                            </div>
                            <input type="hidden" data-field="${field.id}" value="${currentImage || ''}">
                        </div>
                    </div>
                </div>
            `;
        };

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        window.editor.uploadImage = function(fieldId) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = (e) => {
                const file = e.target.files[0];
                if (file) {
                    if (file.size > 5 * 1024 * 1024) {
                        this.showNotification('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
                        return;
                    }
                    
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        this.updateImageField(fieldId, e.target.result);
                        this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
                    };
                    reader.readAsDataURL(file);
                }
            };
            input.click();
        };

        window.editor.setImageUrl = function(fieldId) {
            const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
            if (url) {
                this.updateImageField(fieldId, url);
                this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
            }
        };

        window.editor.removeImage = function(fieldId) {
            if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?')) {
                this.updateImageField(fieldId, '');
                this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
            }
        };

        window.editor.updateImageField = function(fieldId, url) {
            const field = document.querySelector(`[data-field="${fieldId}"]`);
            if (field) {
                field.value = url;
                
                const preview = document.querySelector('.image-preview-enhanced');
                if (preview) {
                    if (url) {
                        preview.innerHTML = `<img src="${url}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;">`;
                        preview.classList.remove('empty');
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                        const actions = document.querySelector('.image-actions-enhanced');
                        if (actions && !actions.querySelector('.danger')) {
                            const deleteBtn = document.createElement('button');
                            deleteBtn.className = 'btn-admin danger';
                            deleteBtn.innerHTML = '<i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                            deleteBtn.onclick = () => this.removeImage(fieldId);
                            deleteBtn.style.cssText = 'background: #dc3545; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;';
                            actions.appendChild(deleteBtn);
                        }
                    } else {
                        preview.innerHTML = `
                            <div style="text-align: center; color: #666;">
                                <i class="fas fa-image" style="font-size: 3em; margin-bottom: 10px; display: block;"></i>
                                <span>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</span>
                            </div>
                        `;
                        preview.classList.add('empty');
                        
                        // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                        const deleteBtn = document.querySelector('.image-actions-enhanced .danger');
                        if (deleteBtn) deleteBtn.remove();
                    }
                }
                
                this.hasUnsavedChanges = true;
            }
        };

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏
        window.editor.addDynamicBlocksManager = function() {
            if (this.currentSection?.id === 'about') {
                this.addStatsBlocksManager();
            }
            if (this.currentSection?.id === 'services') {
                this.addServicesBlocksManager();
            }
        };

        // –ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        window.editor.addStatsBlocksManager = function() {
            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            const oldEditor = contentEditor.querySelector('.stats-blocks-manager');
            if (oldEditor) oldEditor.remove();

            const stats = this.currentData.content?.about?.stats || [];
            
            const statsHTML = `
                <div class="stats-blocks-manager" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border: 2px solid #e9ecef;">
                    <h4 style="color: #2c5aa0; margin-bottom: 15px;">üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h4>
                    <div class="admin-hint" style="color: #666; margin-bottom: 15px; font-style: italic;">
                        –î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ú–∞–∫—Å–∏–º—É–º 6 –±–ª–æ–∫–æ–≤.
                    </div>
                    <div id="stats-blocks-list">
                        ${stats.map((stat, index) => `
                            <div class="stat-block-row" data-index="${index}" style="display: flex; gap: 10px; margin-bottom: 15px; align-items: center; padding: 15px; background: white; border-radius: 6px; border: 1px solid #e9ecef;">
                                <input type="text" class="form-control" value="${stat.value}" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000)" 
                                       oninput="window.editor.updateStatData(${index}, 'value', this.value)" style="flex: 1;">
                                <input type="text" class="form-control" value="${stat.label}" placeholder="–ü–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)" 
                                       oninput="window.editor.updateStatData(${index}, 'label', this.value)" style="flex: 2;">
                                <button class="btn-small danger" onclick="window.editor.removeStatBlock(${index})" 
                                        style="background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer;">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                    <div class="dynamic-blocks-controls" style="display: flex; gap: 10px; margin-top: 15px;">
                        <button class="btn-admin" onclick="window.editor.addStatBlock()" 
                                style="background: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;"
                                ${stats.length >= 6 ? 'disabled' : ''}>
                            <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        </button>
                        <span style="color: #666; font-size: 0.9em; align-self: center;">
                            ${stats.length}/6 –±–ª–æ–∫–æ–≤
                        </span>
                    </div>
                </div>
            `;

            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const targetElement = contentEditor.querySelector('[data-field="description"]') || 
                                 contentEditor.querySelector('.image-manager-enhanced');
            if (targetElement) {
                targetElement.closest('.form-group').insertAdjacentHTML('afterend', statsHTML);
            }
        };

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        window.editor.addStatBlock = function() {
            if (!this.currentData.content.about) this.currentData.content.about = {};
            if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
            
            if (this.currentData.content.about.stats.length >= 6) {
                this.showNotification('–ú–∞–∫—Å–∏–º—É–º 6 –±–ª–æ–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error');
                return;
            }
            
            this.currentData.content.about.stats.push({ 
                value: '0', 
                label: '–ù–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å' 
            });
            
            this.hasUnsavedChanges = true;
            this.addStatsBlocksManager();
            this.showNotification('–ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
        };

        window.editor.updateStatData = function(index, field, value) {
            if (!this.currentData.content.about) this.currentData.content.about = {};
            if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
            
            if (!this.currentData.content.about.stats[index]) {
                this.currentData.content.about.stats[index] = {};
            }
            
            this.currentData.content.about.stats[index][field] = value;
            this.hasUnsavedChanges = true;
        };

        window.editor.removeStatBlock = function(index) {
            if (this.currentData.content?.about?.stats?.[index]) {
                this.currentData.content.about.stats.splice(index, 1);
                this.hasUnsavedChanges = true;
                this.addStatsBlocksManager();
                this.showNotification('–ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω', 'success');
            }
        };

        // –ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–æ–≤ —É—Å–ª—É–≥ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ)
        window.editor.addServicesBlocksManager = function() {
            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            const oldEditor = contentEditor.querySelector('.services-blocks-manager');
            if (oldEditor) oldEditor.remove();

            const services = this.currentData.content?.services?.services || [];
            
            const servicesHTML = `
                <div class="services-blocks-manager" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border: 2px solid #e9ecef;">
                    <h4 style="color: #2c5aa0; margin-bottom: 15px;">üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</h4>
                    <div class="admin-hint" style="color: #666; margin-bottom: 15px; font-style: italic;">
                        –î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —É—Å–ª—É–≥–∏. –ú–∞–∫—Å–∏–º—É–º 8 —É—Å–ª—É–≥.
                    </div>
                    <div id="services-blocks-list">
                        ${services.map((service, index) => `
                            <div class="service-block-row" data-index="${index}" style="display: flex; gap: 10px; margin-bottom: 15px; padding: 15px; background: white; border-radius: 6px; border: 1px solid #e9ecef;">
                                <div style="display: flex; flex-direction: column; gap: 10px; flex: 1;">
                                    <input type="text" class="form-control" value="${service.title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" 
                                           oninput="window.editor.updateServiceData(${index}, 'title', this.value)">
                                    <textarea class="form-control" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" 
                                              oninput="window.editor.updateServiceData(${index}, 'description', this.value)" 
                                              style="min-height: 80px; resize: vertical;">${service.description}</textarea>
                                    <input type="text" class="form-control" value="${service.icon}" placeholder="–ò–∫–æ–Ω–∫–∞ (fas fa-...)" 
                                           oninput="window.editor.updateServiceData(${index}, 'icon', this.value)">
                                </div>
                                <button class="btn-small danger" onclick="window.editor.removeServiceBlock(${index})" 
                                        style="background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; align-self: start;">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                    <div class="dynamic-blocks-controls" style="display: flex; gap: 10px; margin-top: 15px;">
                        <button class="btn-admin" onclick="window.editor.addServiceBlock()" 
                                style="background: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;"
                                ${services.length >= 8 ? 'disabled' : ''}>
                            <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
                        </button>
                        <span style="color: #666; font-size: 0.9em; align-self: center;">
                            ${services.length}/8 —É—Å–ª—É–≥
                        </span>
                    </div>
                </div>
            `;

            const targetElement = contentEditor.querySelector('[data-field="title"]');
            if (targetElement) {
                targetElement.closest('.form-group').insertAdjacentHTML('afterend', servicesHTML);
            }
        };

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
        window.editor.addServiceBlock = function() {
            if (!this.currentData.content.services) this.currentData.content.services = {};
            if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
            
            if (this.currentData.content.services.services.length >= 8) {
                this.showNotification('–ú–∞–∫—Å–∏–º—É–º 8 —É—Å–ª—É–≥', 'error');
                return;
            }
            
            this.currentData.content.services.services.push({ 
                title: '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞', 
                description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏',
                icon: 'fas fa-star'
            });
            
            this.hasUnsavedChanges = true;
            this.addServicesBlocksManager();
            this.showNotification('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
        };

        window.editor.updateServiceData = function(index, field, value) {
            if (!this.currentData.content.services) this.currentData.content.services = {};
            if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
            
            if (!this.currentData.content.services.services[index]) {
                this.currentData.content.services.services[index] = {};
            }
            
            this.currentData.content.services.services[index][field] = value;
            this.hasUnsavedChanges = true;
        };

        window.editor.removeServiceBlock = function(index) {
            if (this.currentData.content?.services?.services?.[index]) {
                this.currentData.content.services.services.splice(index, 1);
                this.hasUnsavedChanges = true;
                this.addServicesBlocksManager();
                this.showNotification('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            }
        };

        // –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        window.editor.addContactEditor = function() {
            if (this.currentSection?.id === 'contact') {
                this.injectContactFields();
            }
        };

        window.editor.injectContactFields = function() {
            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            const contacts = this.currentData.contacts || {};
            
            const contactFieldsHTML = `
                <div class="contact-fields-editor" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; border: 2px solid #e9ecef;">
                    <h4 style="color: #2c5aa0; margin-bottom: 15px;">üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <div class="admin-hint" style="color: #666; margin-bottom: 15px; font-style: italic;">
                        –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è –≤ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ñ—É—Ç–µ—Ä–µ.
                    </div>
                    <div class="contact-fields-grid" style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div class="form-group">
                            <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                            <input type="text" class="form-control" value="${contacts.phone || ''}" 
                                   oninput="window.editor.updateContactField('phone', this.value)" 
                                   placeholder="+7 (999) 123-45-67">
                        </div>
                        <div class="form-group">
                            <label>Email:</label>
                            <input type="email" class="form-control" value="${contacts.email || ''}" 
                                   oninput="window.editor.updateContactField('email', this.value)" 
                                   placeholder="info@worldtravel.com">
                        </div>
                        <div class="form-group">
                            <label>–ê–¥—Ä–µ—Å:</label>
                            <input type="text" class="form-control" value="${contacts.address || ''}" 
                                   oninput="window.editor.updateContactField('address', this.value)" 
                                   placeholder="–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15">
                        </div>
                        <div class="form-group">
                            <label>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</label>
                            <input type="text" class="form-control" value="${contacts.hours || ''}" 
                                   oninput="window.editor.updateContactField('hours', this.value)" 
                                   placeholder="–ü–Ω-–ü—Ç: 9:00-18:00">
                        </div>
                    </div>
                </div>
            `;

            const targetElement = contentEditor.querySelector('[data-field="title"]');
            if (targetElement) {
                targetElement.closest('.form-group').insertAdjacentHTML('afterend', contactFieldsHTML);
            }
        };

        window.editor.updateContactField = function(field, value) {
            if (!this.currentData.contacts) this.currentData.contacts = {};
            this.currentData.contacts[field] = value;
            this.hasUnsavedChanges = true;
        };
    }

    addImageManagement() {
        // CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const style = document.createElement('style');
        style.textContent = `
            .image-preview-enhanced.empty {
                background: linear-gradient(45deg, #f8f9fa 25%, transparent 25%), 
                            linear-gradient(-45deg, #f8f9fa 25%, transparent 25%), 
                            linear-gradient(45deg, transparent 75%, #f8f9fa 75%), 
                            linear-gradient(-45deg, transparent 75%, #f8f9fa 75%);
                background-size: 20px 20px;
                background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
            }
            
            .stat-block-row:hover, .service-block-row:hover {
                border-color: #2c5aa0 !important;
                background: #f8f9fa !important;
            }
            
            @media (max-width: 768px) {
                .contact-fields-grid {
                    grid-template-columns: 1fr !important;
                }
                
                .stat-block-row, .service-block-row {
                    flex-direction: column !important;
                }
            }
        `;
        document.head.appendChild(style);
    }

    addDynamicBlocks() {
        console.log('üì¶ Dynamic blocks system ready');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–ø–µ—Ä-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
new SuperEditor();
