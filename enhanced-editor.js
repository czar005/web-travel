// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É—Å–ª—É–≥
class EnhancedEditor {
    constructor() {
        this.init();
    }

    init() {
        console.log('üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.injectStatsEditor();
        this.injectServicesEditor();
    }

    injectStatsEditor() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
        const originalShowContentEditor = window.editor?.showContentEditor;
        if (window.editor && originalShowContentEditor) {
            window.editor.showContentEditor = function() {
                originalShowContentEditor.call(this);
                this.enhanceStatsEditing();
            }.bind(window.editor);
        }
    }

    injectServicesEditor() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —É—Å–ª—É–≥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
        const originalShowContentEditor = window.editor?.showContentEditor;
        if (window.editor && originalShowContentEditor) {
            window.editor.showContentEditor = function() {
                originalShowContentEditor.call(this);
                this.enhanceServicesEditing();
            }.bind(window.editor);
        }
    }
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
if (window.editor) {
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.editor.enhanceStatsEditing = function() {
        if (this.currentSection?.id === 'about') {
            const contentEditor = document.getElementById('content-editor');
            const statsSection = contentEditor.querySelector('.stats-editor');
            
            if (!statsSection) {
                this.injectStatsEditorUI(contentEditor);
            }
        }
    };

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    window.editor.enhanceServicesEditing = function() {
        if (this.currentSection?.id === 'services') {
            const contentEditor = document.getElementById('content-editor');
            const servicesSection = contentEditor.querySelector('.services-editor');
            
            if (!servicesSection) {
                this.injectServicesEditorUI(contentEditor);
            }
        }
    };

    // –í–Ω–µ–¥—Ä—è–µ–º UI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.editor.injectStatsEditorUI = function(container) {
        const stats = this.currentData.content?.about?.stats || [];
        
        const statsHTML = `
            <div class="stats-editor">
                <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π</h4>
                <div class="admin-hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
                <div id="stats-list">
                    ${stats.map((stat, index) => `
                        <div class="stat-row" data-index="${index}">
                            <input type="text" class="form-control" value="${stat.value}" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ" onchange="editor.updateStat(${index}, 'value', this.value)">
                            <input type="text" class="form-control" value="${stat.label}" placeholder="–ü–æ–¥–ø–∏—Å—å" onchange="editor.updateStat(${index}, 'label', this.value)">
                            <button class="btn-small danger" onclick="editor.removeStat(${index})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('')}
                </div>
                <div class="dynamic-items-controls">
                    <button class="btn-admin" onclick="editor.addStat()">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    </button>
                </div>
            </div>
        `;

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
        const descriptionField = container.querySelector('[data-field="description"]');
        if (descriptionField) {
            descriptionField.closest('.form-group').insertAdjacentHTML('afterend', statsHTML);
        }
    };

    // –í–Ω–µ–¥—Ä—è–µ–º UI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —É—Å–ª—É–≥
    window.editor.injectServicesEditorUI = function(container) {
        const services = this.currentData.content?.services?.services || [];
        
        const servicesHTML = `
            <div class="services-editor">
                <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</h4>
                <div class="admin-hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —É—Å–ª—É–≥–∏</div>
                <div id="services-list">
                    ${services.map((service, index) => `
                        <div class="service-row" data-index="${index}">
                            <input type="text" class="form-control" value="${service.title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" onchange="editor.updateService(${index}, 'title', this.value)">
                            <textarea class="form-control" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" onchange="editor.updateService(${index}, 'description', this.value)">${service.description}</textarea>
                            <input type="text" class="form-control" value="${service.icon}" placeholder="–ò–∫–æ–Ω–∫–∞ (fas fa-...)" onchange="editor.updateService(${index}, 'icon', this.value)">
                            <button class="btn-small danger" onclick="editor.removeService(${index})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('')}
                </div>
                <div class="dynamic-items-controls">
                    <button class="btn-admin" onclick="editor.addService()">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
                    </button>
                </div>
            </div>
        `;

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const titleField = container.querySelector('[data-field="title"]');
        if (titleField) {
            titleField.closest('.form-group').insertAdjacentHTML('afterend', servicesHTML);
        }
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    window.editor.addStat = function() {
        if (!this.currentData.content.about) this.currentData.content.about = {};
        if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
        
        this.currentData.content.about.stats.push({ 
            value: '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 
            label: '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å' 
        });
        
        this.saveData();
        this.showContentEditor();
        this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    };

    window.editor.updateStat = function(index, field, value) {
        if (this.currentData.content?.about?.stats?.[index]) {
            this.currentData.content.about.stats[index][field] = value;
            this.saveData();
            this.hasUnsavedChanges = true;
        }
    };

    window.editor.removeStat = function(index) {
        if (this.currentData.content?.about?.stats?.[index]) {
            this.currentData.content.about.stats.splice(index, 1);
            this.saveData();
            this.showContentEditor();
            this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
    window.editor.addService = function() {
        if (!this.currentData.content.services) this.currentData.content.services = {};
        if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
        
        this.currentData.content.services.services.push({ 
            title: '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞', 
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏',
            icon: 'fas fa-star'
        });
        
        this.saveData();
        this.showContentEditor();
        this.showNotification('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    };

    window.editor.updateService = function(index, field, value) {
        if (this.currentData.content?.services?.services?.[index]) {
            this.currentData.content.services.services[index][field] = value;
            this.saveData();
            this.hasUnsavedChanges = true;
        }
    };

    window.editor.removeService = function(index) {
        if (this.currentData.content?.services?.services?.[index]) {
            this.currentData.content.services.services.splice(index, 1);
            this.saveData();
            this.showContentEditor();
            this.showNotification('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
new EnhancedEditor();
