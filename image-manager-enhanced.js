// Enhanced Image Manager - —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function ImageManagerEnhanced() {
    this.maxFileSize = 5 * 1024 * 1024; // 5MB
    this.supportedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    this.init();
}

ImageManagerEnhanced.prototype.init = function() {
    console.log('üñºÔ∏è Enhanced Image Manager initialized');
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
    this.integrateWithEditor();
};

ImageManagerEnhanced.prototype.integrateWithEditor = function() {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const checkEditor = () => {
        if (window.editor) {
            this.patchEditorMethods();
        } else {
            setTimeout(checkEditor, 100);
        }
    };
    checkEditor();
};

ImageManagerEnhanced.prototype.patchEditorMethods = function() {
    const self = this;
    
    // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const originalUploadImage = window.editor.uploadImage;
    if (originalUploadImage) {
        window.editor.uploadImage = function(fieldId) {
            self.uploadImageWithValidation(fieldId);
        };
    }
    
    // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSetImageUrl = window.editor.setImageUrl;
    if (originalSetImageUrl) {
        window.editor.setImageUrl = function(fieldId) {
            self.setImageUrlWithValidation(fieldId);
        };
    }
    
    console.log('‚úÖ Enhanced Image Manager integrated with editor');
};

ImageManagerEnhanced.prototype.uploadImageWithValidation = function(fieldId) {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = this.supportedFormats.join(',');
    
    input.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file)) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Blob URL
        this.createOptimizedImageBlob(file, fieldId);
    };
    
    input.click();
};

ImageManagerEnhanced.prototype.validateFile = function(file) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!this.supportedFormats.includes(file.type)) {
        this.showNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG, GIF –∏–ª–∏ WebP.', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (file.size > this.maxFileSize) {
        this.showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(this.maxFileSize)}.`, 'error');
        return false;
    }
    
    return true;
};

ImageManagerEnhanced.prototype.createOptimizedImageBlob = function(file, fieldId) {
    const reader = new FileReader();
    const self = this;
    
    reader.onload = function(e) {
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const img = new Image();
        img.onload = function() {
            // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
            const maxWidth = 1920;
            const maxHeight = 1080;
            let { width, height } = img;
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            if (width > maxWidth || height > maxHeight) {
                const ratio = Math.min(maxWidth / width, maxHeight / height);
                width *= ratio;
                height *= ratio;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            ctx.drawImage(img, 0, 0, width, height);
            
            // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Blob
            canvas.toBlob((blob) => {
                const blobUrl = URL.createObjectURL(blob);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
                if (window.editor && window.editor.updateImageField) {
                    window.editor.updateImageField(fieldId, blobUrl);
                }
                
                self.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
                
            }, 'image/jpeg', 0.8); // 80% –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è JPEG
        };
        
        img.onerror = function() {
            // –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Blob URL
            const blobUrl = URL.createObjectURL(file);
            if (window.editor && window.editor.updateImageField) {
                window.editor.updateImageField(fieldId, blobUrl);
            }
            self.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
        };
        
        img.src = e.target.result;
    };
    
    reader.onerror = function() {
        self.showNotification('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
    };
    
    reader.readAsDataURL(file);
};

ImageManagerEnhanced.prototype.setImageUrlWithValidation = function(fieldId) {
    const currentValue = this.getCurrentImageValue(fieldId);
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentValue || '');
    
    if (url === null) return;
    
    if (url === '') {
        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (window.editor && window.editor.removeImage) {
            window.editor.removeImage(fieldId);
        }
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (this.validateImageUrl(url)) {
        if (window.editor && window.editor.updateImageField) {
            window.editor.updateImageField(fieldId, url);
        }
        this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    } else {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (HTTP/HTTPS/data URL)', 'error');
    }
};

ImageManagerEnhanced.prototype.validateImageUrl = function(url) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
        new URL(url);
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º HTTP, HTTPS –∏ data URL
        return url.startsWith('http://') || 
               url.startsWith('https://') || 
               url.startsWith('data:image') ||
               url.startsWith('/') || // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
               url.startsWith('images/'); // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    } catch {
        return false;
    }
};

ImageManagerEnhanced.prototype.getCurrentImageValue = function(fieldId) {
    const field = document.querySelector(`[data-field="${fieldId}"]`);
    return field ? field.value : '';
};

ImageManagerEnhanced.prototype.formatFileSize = function(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

ImageManagerEnhanced.prototype.showNotification = function(message, type) {
    if (window.editor && window.editor.showNotification) {
        window.editor.showNotification(message, type);
    } else {
        // –§–æ–ª–±—ç–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log(`${type === 'error' ? '‚ùå' : '‚úÖ'} ${message}`);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
new ImageManagerEnhanced();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ImageManagerEnhanced = ImageManagerEnhanced;
