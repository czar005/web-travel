]633;E;for file in $(find . -name "*.html" -o -name "*.js" -o -name "*.css" -o -name "*.json" | grep -v node_modules | head -20);e20f9784-dbb2-43ca-9593-b9a9d4bd3764]633;C=== FILE: ./admin-style.css ===
/* Admin Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background: #f5f5f5;
    color: #333;
}

.admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.admin-header {
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.admin-header h1 {
    color: #2c5aa0;
    font-size: 1.5rem;
}

.admin-nav {
    display: flex;
    gap: 10px;
}

.admin-tabs {
    display: flex;
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 20px;
    overflow: hidden;
}

.tab-button {
    flex: 1;
    padding: 15px 20px;
    border: none;
    background: transparent;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.tab-button:hover {
    background: #f8f9fa;
}

.tab-button.active {
    background: #2c5aa0;
    color: white;
}

.tab-content {
    background: white;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    padding: 30px;
}

.tab-pane {
    display: none;
}

.tab-pane.active {
    display: block;
}

.admin-section {
    margin-bottom: 30px;
}

.admin-section h3 {
    color: #2c5aa0;
    margin-bottom: 20px;
    font-size: 1.2rem;
}

.admin-hint {
    color: #666;
    font-size: 14px;
    margin-bottom: 15px;
    font-style: italic;
}

.admin-form {
    max-width: 600px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #333;
}

.form-group input,
.form-group textarea,
.form-group select {
    width: 100%;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
    transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus,
.form-group select:focus {
    outline: none;
    border-color: #2c5aa0;
}

.btn-admin {
    background: #2c5aa0;
    color: white;
    border: none;
    padding: 12px 25px;
    border-radius: 5px;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
    font-weight: 500;
    transition: background 0.3s ease;
}

.btn-admin:hover {
    background: #1e3d6f;
}

.btn-admin.secondary {
    background: #6c757d;
}

.btn-admin.secondary:hover {
    background: #545b62;
}

.btn-admin.danger {
    background: #dc3545;
}

.btn-admin.danger:hover {
    background: #c82333;
}

.btn-admin.warning {
    background: #ffc107;
    color: #000;
}

.btn-admin.warning:hover {
    background: #e0a800;
}

.table-container {
    overflow-x: auto;
}

.admin-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

.admin-table th,
.admin-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
}

.admin-table th {
    background: #f8f9fa;
    font-weight: 600;
    color: #333;
}

.admin-table tr:hover {
    background: #f8f9fa;
}

.btn-small {
    padding: 6px 12px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    margin-right: 5px;
}

.btn-small.danger {
    background: #dc3545;
    color: white;
}

.btn-small.danger:hover {
    background: #c82333;
}

/* Responsive */
@media (max-width: 768px) {
    .admin-container {
        padding: 10px;
    }
    
    .admin-header {
        flex-direction: column;
        gap: 15px;
        text-align: center;
    }
    
    .admin-tabs {
        flex-direction: column;
    }
    
    .tab-content {
        padding: 20px;
    }
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Ç—É—Ä–æ–≤ */
.tour-info {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.tour-info small {
    color: #666;
    font-size: 0.8rem;
}

.country-badge {
    background: #e3f2fd;
    color: #1976d2;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
}

.price-tag {
    background: #e8f5e8;
    color: #2e7d32;
    padding: 6px 12px;
    border-radius: 15px;
    font-weight: 700;
    font-size: 0.9rem;
}

.duration-badge {
    background: #fff3e0;
    color: #ef6c00;
    padding: 4px 8px;
    border-radius: 10px;
    font-size: 0.8rem;
    font-weight: 500;
}

.tour-count-badge {
    background: #2c5aa0;
    color: white;
    padding: 4px 8px;
    border-radius: 10px;
    font-size: 0.8rem;
    font-weight: 600;
    min-width: 25px;
    display: inline-block;
    text-align: center;
}

.action-buttons {
    display: flex;
    gap: 5px;
}

.btn-small.warning {
    background: #ffc107;
    color: #000;
}

.btn-small.warning:hover {
    background: #e0a800;
}

/* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º */
.form-group input[type="number"] {
    -moz-appearance: textfield;
}

.form-group input[type="number"]::-webkit-outer-spin-button,
.form-group input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

/* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü */
.admin-table tr {
    transition: background-color 0.2s ease;
}

.admin-table tr:hover {
    background-color: #f8f9fa;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ */
@media (max-width: 768px) {
    .admin-table {
        font-size: 0.9rem;
    }
    
    .action-buttons {
        flex-direction: column;
    }
    
    .tour-info {
        min-width: 150px;
    }
    
    .country-badge,
    .price-tag,
    .duration-badge {
        font-size: 0.7rem;
        padding: 3px 6px;
    }
}



=== FILE: ./fix-contacts-html.html ===
<div class="contact-content" style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; align-items: start;">
    <div class="contact-info" style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1);">
        <h3>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
        <div class="contact-item">
            <strong><i class="fas fa-phone"></i> –¢–µ–ª–µ—Ñ–æ–Ω:</strong>
            <p>+7 (999) 123-45-67</p>
        </div>
        <div class="contact-item">
            <strong><i class="fas fa-envelope"></i> Email:</strong>
            <p>info@worldtravel.com</p>
        </div>
        <div class="contact-item">
            <strong><i class="fas fa-map-marker-alt"></i> –ê–¥—Ä–µ—Å:</strong>
            <p>–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15</p>
        </div>
        <div class="contact-item">
            <strong><i class="fas fa-clock"></i> –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</strong>
            <p>–ü–Ω-–ü—Ç: 9:00-18:00</p>
        </div>
    </div>
    <form class="contact-form" style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); display: flex; flex-direction: column; gap: 15px;">
        <input type="text" placeholder="–í–∞—à–µ –∏–º—è" required>
        <input type="email" placeholder="–í–∞—à email" required>
        <input type="tel" placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω">
        <textarea placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" rows="5" required></textarea>
        <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
    </form>
</div>



=== FILE: ./image-manager-enhanced.js ===
// Enhanced Image Manager - —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function ImageManagerEnhanced() {
    this.maxFileSize = 5 * 1024 * 1024; // 5MB
    this.supportedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    this.init();
}

ImageManagerEnhanced.prototype.init = function() {
    console.log('üñºÔ∏è Enhanced Image Manager initialized');
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
    this.integrateWithEditor();
};

ImageManagerEnhanced.prototype.integrateWithEditor = function() {
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const checkEditor = () => {
        if (window.editor) {
            this.patchEditorMethods();
        } else {
            setTimeout(checkEditor, 100);
        }
    };
    checkEditor();
};

ImageManagerEnhanced.prototype.patchEditorMethods = function() {
    const self = this;
    
    // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const originalUploadImage = window.editor.uploadImage;
    if (originalUploadImage) {
        window.editor.uploadImage = function(fieldId) {
            self.uploadImageWithValidation(fieldId);
        };
    }
    
    // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const originalSetImageUrl = window.editor.setImageUrl;
    if (originalSetImageUrl) {
        window.editor.setImageUrl = function(fieldId) {
            self.setImageUrlWithValidation(fieldId);
        };
    }
    
    console.log('‚úÖ Enhanced Image Manager integrated with editor');
};

ImageManagerEnhanced.prototype.uploadImageWithValidation = function(fieldId) {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = this.supportedFormats.join(',');
    
    input.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file)) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Blob URL
        this.createOptimizedImageBlob(file, fieldId);
    };
    
    input.click();
};

ImageManagerEnhanced.prototype.validateFile = function(file) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if (!this.supportedFormats.includes(file.type)) {
        this.showNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG, GIF –∏–ª–∏ WebP.', 'error');
        return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (file.size > this.maxFileSize) {
        this.showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(this.maxFileSize)}.`, 'error');
        return false;
    }
    
    return true;
};

ImageManagerEnhanced.prototype.createOptimizedImageBlob = function(file, fieldId) {
    const reader = new FileReader();
    const self = this;
    
    reader.onload = function(e) {
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const img = new Image();
        img.onload = function() {
            // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
            const maxWidth = 1920;
            const maxHeight = 1080;
            let { width, height } = img;
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
            if (width > maxWidth || height > maxHeight) {
                const ratio = Math.min(maxWidth / width, maxHeight / height);
                width *= ratio;
                height *= ratio;
            }
            
            canvas.width = width;
            canvas.height = height;
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            ctx.drawImage(img, 0, 0, width, height);
            
            // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Blob
            canvas.toBlob((blob) => {
                const blobUrl = URL.createObjectURL(blob);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
                if (window.editor && window.editor.updateImageField) {
                    window.editor.updateImageField(fieldId, blobUrl);
                }
                
                self.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
                
            }, 'image/jpeg', 0.8); // 80% –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è JPEG
        };
        
        img.onerror = function() {
            // –ï—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Blob URL
            const blobUrl = URL.createObjectURL(file);
            if (window.editor && window.editor.updateImageField) {
                window.editor.updateImageField(fieldId, blobUrl);
            }
            self.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
        };
        
        img.src = e.target.result;
    };
    
    reader.onerror = function() {
        self.showNotification('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
    };
    
    reader.readAsDataURL(file);
};

ImageManagerEnhanced.prototype.setImageUrlWithValidation = function(fieldId) {
    const currentValue = this.getCurrentImageValue(fieldId);
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentValue || '');
    
    if (url === null) return;
    
    if (url === '') {
        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (window.editor && window.editor.removeImage) {
            window.editor.removeImage(fieldId);
        }
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (this.validateImageUrl(url)) {
        if (window.editor && window.editor.updateImageField) {
            window.editor.updateImageField(fieldId, url);
        }
        this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    } else {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (HTTP/HTTPS/data URL)', 'error');
    }
};

ImageManagerEnhanced.prototype.validateImageUrl = function(url) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
        new URL(url);
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º HTTP, HTTPS –∏ data URL
        return url.startsWith('http://') || 
               url.startsWith('https://') || 
               url.startsWith('data:image') ||
               url.startsWith('/') || // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
               url.startsWith('images/'); // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    } catch {
        return false;
    }
};

ImageManagerEnhanced.prototype.getCurrentImageValue = function(fieldId) {
    const field = document.querySelector(`[data-field="${fieldId}"]`);
    return field ? field.value : '';
};

ImageManagerEnhanced.prototype.formatFileSize = function(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

ImageManagerEnhanced.prototype.showNotification = function(message, type) {
    if (window.editor && window.editor.showNotification) {
        window.editor.showNotification(message, type);
    } else {
        // –§–æ–ª–±—ç–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log(`${type === 'error' ? '‚ùå' : '‚úÖ'} ${message}`);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
new ImageManagerEnhanced();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ImageManagerEnhanced = ImageManagerEnhanced;



=== FILE: ./apply-critical-fixes.js ===
const fs = require('fs');

// 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Ä—Å—Ç–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ index.html
console.log('üìû –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...');
let indexHtml = fs.readFileSync('index.html', 'utf8');

// –ó–∞–º–µ–Ω—è–µ–º –≤—Å—é —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
const fixedContactsHTML = `
            <div class="contact-content" style="display: grid; grid-template-columns: 1fr 1fr; gap: 40px; align-items: start;">
                <div class="contact-info" style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1);">
                    <h3>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                    <div class="contact-item">
                        <strong><i class="fas fa-phone"></i> –¢–µ–ª–µ—Ñ–æ–Ω:</strong>
                        <p>+7 (999) 123-45-67</p>
                    </div>
                    <div class="contact-item">
                        <strong><i class="fas fa-envelope"></i> Email:</strong>
                        <p>info@worldtravel.com</p>
                    </div>
                    <div class="contact-item">
                        <strong><i class="fas fa-map-marker-alt"></i> –ê–¥—Ä–µ—Å:</strong>
                        <p>–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15</p>
                    </div>
                    <div class="contact-item">
                        <strong><i class="fas fa-clock"></i> –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</strong>
                        <p>–ü–Ω-–ü—Ç: 9:00-18:00</p>
                    </div>
                </div>
                <form class="contact-form" style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); display: flex; flex-direction: column; gap: 15px;">
                    <input type="text" placeholder="–í–∞—à–µ –∏–º—è" required>
                    <input type="email" placeholder="–í–∞—à email" required>
                    <input type="tel" placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω">
                    <textarea placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" rows="5" required></textarea>
                    <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
                </form>
            </div>
`;

// –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
const contactSectionRegex = /<div class="contact-content">[\\s\\S]*?<\\/form>\\s*<\\/div>/;
if (contactSectionRegex.test(indexHtml)) {
    indexHtml = indexHtml.replace(contactSectionRegex, fixedContactsHTML);
    console.log('‚úÖ –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–∞');
} else {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    const alternativeRegex = /<section id="contact"[\\s\\S]*?<div class="container">[\\s\\S]*?<h2[\\s\\S]*?<\\/h2>([\\s\\S]*?)<\\/section>/;
    const match = indexHtml.match(alternativeRegex);
    if (match) {
        indexHtml = indexHtml.replace(match[1], fixedContactsHTML);
        console.log('‚úÖ –°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–º–µ–Ω–µ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)');
    }
}

// 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const scriptsToAdd = [
    'fix-contacts-layout.js',
    'fixed-stats-editor.js', 
    'enhanced-page-editor-fixed.js'
];

scriptsToAdd.forEach(script => {
    if (!indexHtml.includes(script)) {
        indexHtml = indexHtml.replace('</body>', `<script src="${script}"></script></body>`);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç: ${script}`);
    }
});

// 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π index.html
fs.writeFileSync('index.html', indexHtml);
console.log('üíæ index.html —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏');

// 4. –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º page-editor.html –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try {
    let pageEditorHtml = fs.readFileSync('page-editor.html', 'utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    if (!pageEditorHtml.includes('enhanced-page-editor-fixed.js')) {
        pageEditorHtml = pageEditorHtml.replace('</body>', '<script src="enhanced-page-editor-fixed.js"></script></body>');
        console.log('‚úÖ enhanced-page-editor-fixed.js –¥–æ–±–∞–≤–ª–µ–Ω –≤ page-editor.html');
    }
    
    if (!pageEditorHtml.includes('fixed-stats-editor.js')) {
        pageEditorHtml = pageEditorHtml.replace('</body>', '<script src="fixed-stats-editor.js"></script></body>');
        console.log('‚úÖ fixed-stats-editor.js –¥–æ–±–∞–≤–ª–µ–Ω –≤ page-editor.html');
    }
    
    fs.writeFileSync('page-editor.html', pageEditorHtml);
    console.log('üíæ page-editor.html –æ–±–Ω–æ–≤–ª–µ–Ω');
} catch (e) {
    console.log('‚ÑπÔ∏è page-editor.html –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
}

console.log('üéâ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
console.log('üìã –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
console.log('   ‚úÖ –í–µ—Ä—Å—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—É–±—Ä–∞–Ω—ã –ø–µ—Ä–µ–∫–æ—Å—ã)');
console.log('   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ');
console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');



=== FILE: ./page-editor.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü - WorldTravel</title>
    <link rel="stylesheet" href="admin-style.css">
    <link rel="stylesheet" href="enhanced-editor.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* –í—Å–µ —Å—Ç–∏–ª–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #f5f7fa;
            height: 100vh;
            overflow: hidden;
        }

        .editor-container {
            display: flex;
            height: 100vh;
        }

        .preview-panel {
            flex: 1;
            background: white;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        .editor-panel {
            width: 450px;
            background: white;
            border-left: 2px solid #e1e5e9;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            padding: 20px;
            background: #2c5aa0;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-shrink: 0;
        }

        .panel-content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }

        .preview-frame-container {
            flex: 1;
            position: relative;
            overflow: hidden;
        }

        .preview-frame {
            width: 100%;
            height: 100%;
            border: none;
        }

        .section-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .section-item {
            padding: 15px;
            background: #f8f9fa;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .section-item:hover {
            border-color: #2c5aa0;
            background: #e3f2fd;
        }

        .section-item.active {
            border-color: #2c5aa0;
            background: #2c5aa0;
            color: white;
        }

        .section-title {
            font-weight: 600;
            margin-bottom: 5px;
        }

        .section-desc {
            font-size: 0.9em;
            color: #666;
        }

        .section-item.active .section-desc {
            color: #e0e0e0;
        }

        .section-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .section-item:hover .section-actions {
            opacity: 1;
        }

        .section-item.active .section-actions {
            opacity: 1;
        }

        .btn-section-action {
            background: rgba(255,255,255,0.9);
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .btn-section-action:hover {
            background: white;
            transform: scale(1.1);
        }

        .btn-section-action.delete {
            color: #dc3545;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #2c5aa0;
            box-shadow: 0 0 0 3px rgba(44, 90, 160, 0.1);
        }

        textarea.form-control {
            resize: vertical;
            min-height: 100px;
            font-family: inherit;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #2c5aa0;
            color: white;
        }

        .btn-primary:hover {
            background: #1e3d6f;
            transform: translateY(-1px);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #545b62;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-warning {
            background: #ffc107;
            color: #000;
        }

        .btn-warning:hover {
            background: #e0a800;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        .btn-small {
            padding: 8px 16px;
            font-size: 12px;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-state i {
            font-size: 3em;
            margin-bottom: 15px;
            color: #ccc;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 25px;
            padding-top: 20px;
            border-top: 2px solid #f0f0f0;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 16px 20px;
            border-radius: 8px;
            background: #28a745;
            color: white;
            z-index: 10000;
            animation: slideInRight 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
        }

        .notification.error {
            background: #dc3545;
        }

        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        .tab-buttons {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .tab-button {
            flex: 1;
            padding: 16px;
            border: none;
            background: transparent;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .tab-button.active {
            border-bottom-color: #2c5aa0;
            background: white;
            color: #2c5aa0;
        }

        .content-header {
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .save-indicator {
            background: #d4edda;
            color: #155724;
            padding: 10px 15px;
            border-radius: 5px;
            margin: 10px 0;
            display: none;
            align-items: center;
            gap: 8px;
        }

        .save-indicator.show {
            display: flex;
        }
    </style>
</head>
<body>
    <div class="editor-container">
        <div class="preview-panel">
            <div class="panel-header">
                <h2>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h2>
                <div>
                    <button class="btn btn-warning" onclick="editor.showAddSectionModal()">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é
                    </button>
                    <button class="btn btn-secondary" onclick="editor.safeRefresh()" style="margin-left: 10px;">
                        <i class="fas fa-sync"></i> –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button class="btn btn-success" onclick="editor.saveAndExit()" style="margin-left: 10px;">
                        <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏
                    </button>
                </div>
            </div>
            
            <div class="save-indicator" id="save-indicator">
                <i class="fas fa-check-circle"></i>
                <span id="save-message">–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</span>
            </div>

            <div class="preview-frame-container">
                <iframe class="preview-frame" id="preview-frame" src="index.html?editor=true&nocache=1"></iframe>
            </div>
        </div>

        <div class="editor-panel">
            <div class="panel-header">
                <h2>–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
            </div>
            
            <div class="tab-buttons">
                <button class="tab-button active" data-tab="sections">–°–µ–∫—Ü–∏–∏</button>
                <button class="tab-button" data-tab="content">–ö–æ–Ω—Ç–µ–Ω—Ç</button>
            </div>

            <div class="panel-content" id="sections-tab">
                <div class="content-header">
                    <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h3>
                    <p style="color: #666; margin-top: 5px; font-size: 0.9em;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
                </div>
                <div class="section-list" id="section-list">
                    <!-- –°–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ JS -->
                </div>
            </div>

            <div class="panel-content" id="content-tab" style="display: none;">
                <div id="content-editor">
                    <div class="empty-state">
                        <i class="fas fa-mouse-pointer"></i>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                        <small>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–°–µ–∫—Ü–∏–∏" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –±–ª–æ–∫</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        function StablePageEditor() {
            this.currentSection = null;
            this.currentData = {};
            this.hasUnsavedChanges = false;
            this.sections = [];
            
            this.init();
        }

        StablePageEditor.prototype.init = function() {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞...');
            this.loadCurrentData();
            this.setupTabHandlers();
            this.loadSectionsList();
            
            var self = this;
            setTimeout(function() {
                if (self.sections.length > 0) {
                    self.selectSection(self.sections[0].id);
                }
            }, 1000);
        };

        StablePageEditor.prototype.loadCurrentData = function() {
            console.log('üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            if (typeof window.dataManager !== 'undefined' && window.dataManager) {
                this.currentData = window.dataManager.getData() || {};
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ DataManager');
            } else {
                console.log('‚ö†Ô∏è DataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º localStorage');
                this.currentData = this.getLocalData();
            }
            
            this.loadSectionsFromData();
            console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ–∫—Ü–∏–π:', this.sections.length);
        };

        StablePageEditor.prototype.getLocalData = function() {
            var localData = localStorage.getItem('worldtravel_data');
            if (localData) {
                try {
                    return JSON.parse(localData);
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', e);
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            return {
                content: {
                    hero: { 
                        id: 'hero',
                        type: 'hero',
                        name: '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä',
                        title: '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä —Å WorldTravel', 
                        subtitle: '–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.',
                        image: 'images/travel-placeholder.svg'
                    },
                    about: { 
                        id: 'about',
                        type: 'about',
                        name: '–û –∫–æ–º–ø–∞–Ω–∏–∏',
                        title: '–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏', 
                        description: 'WorldTravel - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ —Ç—É—Ä–∏–∑–º—É.',
                        image: 'images/travel-placeholder.svg'
                    },
                    services: { 
                        id: 'services',
                        type: 'services',
                        name: '–£—Å–ª—É–≥–∏',
                        title: '–ù–∞—à–∏ —É—Å–ª—É–≥–∏'
                    },
                    destinations: { 
                        id: 'destinations',
                        type: 'destinations',
                        name: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                        title: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
                    },
                    contact: { 
                        id: 'contact',
                        type: 'contact',
                        name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
                        title: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏'
                    }
                },
                footer: { 
                    id: 'footer',
                    type: 'footer',
                    name: '–§—É—Ç–µ—Ä',
                    description: '–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.',
                    copyright: '&copy; 2024 WorldTravel. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.'
                },
                pageStructure: ['hero', 'about', 'services', 'destinations', 'contact'],
                lastUpdate: new Date().toISOString()
            };
        };

        StablePageEditor.prototype.loadSectionsFromData = function() {
            this.sections = [];
            console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ü–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö...');
            
            // –°–æ–∑–¥–∞–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            var defaultSections = [
                { id: 'hero', type: 'hero', name: '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π' },
                { id: 'about', type: 'about', name: '–û –∫–æ–º–ø–∞–Ω–∏–∏', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏' },
                { id: 'services', type: 'services', name: '–£—Å–ª—É–≥–∏', description: '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∫–æ–º–ø–∞–Ω–∏–∏' },
                { id: 'destinations', type: 'destinations', name: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', description: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
                { id: 'contact', type: 'contact', name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', description: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' }
            ];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            var self = this;
            defaultSections.forEach(function(section) {
                if (self.currentData.content && self.currentData.content[section.id]) {
                    self.sections.push({
                        id: section.id,
                        type: section.type,
                        name: self.currentData.content[section.id].name || section.name,
                        description: section.description
                    });
                } else {
                    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
                    self.sections.push(section);
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
            if (this.currentData.footer) {
                this.sections.push({
                    id: 'footer',
                    type: 'footer',
                    name: '–§—É—Ç–µ—Ä',
                    description: '–¢–µ–∫—Å—Ç –≤ –ø–æ–¥–≤–∞–ª–µ —Å–∞–π—Ç–∞'
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ pageStructure
            if (this.currentData.pageStructure) {
                this.currentData.pageStructure.forEach(function(sectionId) {
                    if (sectionId.startsWith('section-') && self.currentData.content && self.currentData.content[sectionId]) {
                        var sectionData = self.currentData.content[sectionId];
                        self.sections.push({
                            id: sectionId,
                            type: sectionData.type || 'custom',
                            name: sectionData.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ–∫—Ü–∏—è',
                            description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫'
                        });
                    }
                });
            }
            
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ–∫—Ü–∏–π:', this.sections.length);
        };

        StablePageEditor.prototype.setupTabHandlers = function() {
            var tabButtons = document.querySelectorAll('.tab-button');
            var self = this;
            
            tabButtons.forEach(function(button) {
                button.addEventListener('click', function(e) {
                    var tabName = e.target.getAttribute('data-tab');
                    if (tabName) {
                        self.showTab(tabName);
                    }
                });
            });
        };

        StablePageEditor.prototype.loadSectionsList = function() {
            var container = document.getElementById('section-list');
            container.innerHTML = '';

            if (this.sections.length === 0) {
                container.innerHTML = '\
                    <div class="empty-state">\
                        <i class="fas fa-inbox"></i>\
                        <p>–°–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>\
                        <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</small>\
                    </div>\
                ';
                return;
            }

            var self = this;
            this.sections.forEach(function(section) {
                var sectionElement = document.createElement('div');
                sectionElement.className = 'section-item ' + (self.currentSection && self.currentSection.id === section.id ? 'active' : '');
                sectionElement.setAttribute('data-section', section.id);
                
                sectionElement.innerHTML = '\
                    <div class="section-title">' + section.name + '</div>\
                    <div class="section-desc">' + section.description + '</div>\
                ';

                sectionElement.addEventListener('click', function() {
                    self.selectSection(section.id);
                });

                container.appendChild(sectionElement);
            });
            
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω:', this.sections.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        };

        StablePageEditor.prototype.selectSection = function(sectionId) {
            console.log('üéØ –í—ã–±–æ—Ä —Å–µ–∫—Ü–∏–∏:', sectionId);
            
            document.querySelectorAll('.section-item').forEach(function(item) {
                item.classList.remove('active');
            });

            var selectedItem = document.querySelector('[data-section="' + sectionId + '"]');
            if (selectedItem) {
                selectedItem.classList.add('active');
            }

            this.currentSection = this.sections.find(function(s) {
                return s.id === sectionId;
            });
            
            this.showContentEditor();
            this.showTab('content');
        };

        StablePageEditor.prototype.showTab = function(tabName) {
            document.querySelectorAll('.panel-content').forEach(function(tab) {
                tab.style.display = 'none';
            });
            
            var targetTab = document.getElementById(tabName + '-tab');
            if (targetTab) {
                targetTab.style.display = 'block';
            }
            
            document.querySelectorAll('.tab-button').forEach(function(btn) {
                btn.classList.remove('active');
            });
            
            var targetButton = document.querySelector('[data-tab="' + tabName + '"]');
            if (targetButton) {
                targetButton.classList.add('active');
            }
        };

        StablePageEditor.prototype.showContentEditor = function() {
            if (!this.currentSection) {
                var editor = document.getElementById('content-editor');
                editor.innerHTML = '\
                    <div class="empty-state">\
                        <i class="fas fa-mouse-pointer"></i>\
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>\
                    </div>\
                ';
                return;
            }

            var editor = document.getElementById('content-editor');
            var currentTitle = this.getCurrentValue('title');
            var currentName = this.getCurrentValue('name');
            
            var editorHTML = '\
                <div class="content-header">\
                    <h3>' + this.currentSection.name + '</h3>\
                    <p style="color: #666; margin-top: 5px; font-size: 0.9em;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–µ–∫—Ü–∏–∏</p>\
                </div>\
                <div class="form-group">\
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ (–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ):</label>\
                    <input type="text" class="form-control" data-field="name" value="' + (currentName || this.currentSection.name) + '" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏...">\
                </div>\
                <div class="form-group">\
                    <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</label>\
                    <input type="text" class="form-control" data-field="title" value="' + (currentTitle || '') + '" placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫...">\
                </div>\
            ';

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–µ–∫—Ü–∏–π
            switch (this.currentSection.type) {
                case 'hero':
                    editorHTML += this.getHeroEditor();
                    break;
                case 'about':
                    editorHTML += this.getAboutEditor();
                    break;
                case 'services':
                    editorHTML += this.getServicesEditor();
                    break;
                case 'footer':
                    editorHTML += this.getFooterEditor();
                    break;
            }

            editorHTML += '\
                <div class="action-buttons">\
                    <button class="btn btn-primary" onclick="editor.saveChanges()">\
                        <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\
                    </button>\
                    <button class="btn btn-secondary" onclick="editor.showTab(\'sections\')">\
                        <i class="fas fa-arrow-left"></i> –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É\
                    </button>\
                </div>\
                <div style="background: #f8f9fa; padding: 10px; border-radius: 5px; margin-top: 20px;">\
                    <strong>–û—Ç–ª–∞–¥–∫–∞:</strong> ID: ' + this.currentSection.id + ' | –¢–∏–ø: ' + this.currentSection.type + '\
                </div>\
            ';

            editor.innerHTML = editorHTML;
            this.hasUnsavedChanges = false;
        };

        StablePageEditor.prototype.getHeroEditor = function() {
            var currentSubtitle = this.getCurrentValue('subtitle');
            return '\
                <div class="form-group">\
                    <label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:</label>\
                    <textarea class="form-control" data-field="subtitle" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫...">' + (currentSubtitle || '') + '</textarea>\
                </div>\
            ';
        };

        StablePageEditor.prototype.getAboutEditor = function() {
            var currentDescription = this.getCurrentValue('description');
            return '\
                <div class="form-group">\
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</label>\
                    <textarea class="form-control" data-field="description" placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏...">' + (currentDescription || '') + '</textarea>\
                </div>\
            ';
        };

        StablePageEditor.prototype.getServicesEditor = function() {
            return '\
                <div class="form-group">\
                    <label>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:</label>\
                    <p style="color: #666; font-size: 0.9em;">–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</p>\
                </div>\
            ';
        };

        StablePageEditor.prototype.getFooterEditor = function() {
            var currentDescription = this.getCurrentValue('description');
            var currentCopyright = this.getCurrentValue('copyright');
            
            return '\
                <div class="form-group">\
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ—É—Ç–µ—Ä–µ:</label>\
                    <textarea class="form-control" data-field="description" placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ—É—Ç–µ—Ä–∞...">' + (currentDescription || '') + '</textarea>\
                </div>\
                <div class="form-group">\
                    <label>–¢–µ–∫—Å—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–∞:</label>\
                    <input type="text" class="form-control" data-field="copyright" value="' + (currentCopyright || '') + '" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–∞...">\
                </div>\
            ';
        };

        StablePageEditor.prototype.getCurrentValue = function(fieldId) {
            // –î–ª—è —Ñ—É—Ç–µ—Ä–∞
            if (this.currentSection.id === 'footer') {
                if (this.currentData.footer && this.currentData.footer[fieldId]) {
                    return this.escapeHtml(this.currentData.footer[fieldId]);
                }
            }
            
            // –î–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            if (this.currentData.content && this.currentData.content[this.currentSection.id]) {
                var sectionData = this.currentData.content[this.currentSection.id];
                if (sectionData[fieldId]) {
                    return this.escapeHtml(sectionData[fieldId]);
                }
            }
            
            return '';
        };

        StablePageEditor.prototype.saveChanges = function() {
            if (!this.currentSection) return;

            try {
                var formData = {};
                document.querySelectorAll('#content-editor [data-field]').forEach(function(input) {
                    var fieldId = input.getAttribute('data-field');
                    formData[fieldId] = input.value;
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if (this.currentSection.id === 'footer') {
                    if (!this.currentData.footer) this.currentData.footer = {};
                    Object.keys(formData).forEach(function(fieldId) {
                        this.currentData.footer[fieldId] = formData[fieldId];
                    }.bind(this));
                } else {
                    if (!this.currentData.content[this.currentSection.id]) {
                        this.currentData.content[this.currentSection.id] = {};
                    }
                    Object.keys(formData).forEach(function(fieldId) {
                        this.currentData.content[this.currentSection.id][fieldId] = formData[fieldId];
                    }.bind(this));
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if (formData.name && formData.name !== this.currentSection.name) {
                    this.currentSection.name = formData.name;
                    this.loadSectionsList();
                }

                this.saveData();
                this.hasUnsavedChanges = false;
                this.showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
                this.safeRefresh();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message, 'error');
            }
        };

        StablePageEditor.prototype.saveData = function() {
            try {
                this.currentData.lastUpdate = new Date().toISOString();
                localStorage.setItem('worldtravel_data', JSON.stringify(this.currentData));
                
                if (typeof window.dataManager !== 'undefined' && window.dataManager) {
                    window.dataManager.setData(this.currentData);
                }
                
                console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
                return true;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                return false;
            }
        };

        StablePageEditor.prototype.safeRefresh = function() {
            var frame = document.getElementById('preview-frame');
            var currentSrc = frame.src.split('?')[0];
            frame.src = currentSrc + '?editor=true&nocache=1&t=' + Date.now();
        };

        StablePageEditor.prototype.saveAndExit = function() {
            window.location.href = 'admin.html';
        };

        StablePageEditor.prototype.showAddSectionModal = function() {
            this.showNotification('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
        };

        StablePageEditor.prototype.showNotification = function(message, type) {
            type = type || 'success';
            var notification = document.createElement('div');
            notification.className = 'notification ' + (type === 'error' ? 'error' : '');
            notification.innerHTML = '\
                <i class="fas fa-' + (type === 'error' ? 'exclamation-triangle' : 'check-circle') + '"></i>\
                ' + message + '\
            ';
            
            document.body.appendChild(notification);
            
            setTimeout(function() {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 4000);
        };

        StablePageEditor.prototype.escapeHtml = function(text) {
            if (!text) return '';
            var div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        var editor = new StablePageEditor();
        window.editor = editor;

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        window.refreshPreview = function() { editor.safeRefresh(); };
        window.saveAndExit = function() { editor.saveAndExit(); };
    </script>
    <script src="enhanced-editor.js"></script>
                    <script src="enhanced-content-updater-fixed.js"></script>
    <script src="super-editor-fixed.js"></script>
</body>
</html>



=== FILE: ./admin.js ===
// Improved Admin JavaScript with better error handling and force refresh
console.log('üîÑ Admin JS loading...');

document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Admin DOM loaded');
    initializeAdmin();
});

function initializeAdmin() {
    console.log('üöÄ Initializing admin...');
    
    // Wait for dataManager to be ready
    const initInterval = setInterval(() => {
        if (window.dataManager) {
            clearInterval(initInterval);
            loadAdminData();
            setupAdminEventListeners();
            loadCountrySelect();
            console.log('‚úÖ Admin initialized successfully');
        }
    }, 100);

    // Fallback timeout
    setTimeout(() => {
        clearInterval(initInterval);
        if (!window.dataManager) {
            console.error('‚ùå DataManager not available, using fallback');
            showAdminNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        }
    }, 5000);
}

function setupAdminEventListeners() {
    console.log('ÔøΩÔøΩ Setting up admin event listeners...');
    
    // Form handlers
    const addCountryForm = document.getElementById('add-country-form');
    const addTourForm = document.getElementById('add-tour-form');
    const contactForm = document.getElementById('contact-form');
    const settingsForm = document.getElementById('settings-form');
    
    if (addCountryForm) {
        addCountryForm.addEventListener('submit', handleAddCountry);
        console.log('‚úÖ Country form handler added');
    }
    
    if (addTourForm) {
        addTourForm.addEventListener('submit', handleAddTour);
        console.log('‚úÖ Tour form handler added');
    }
    
    if (contactForm) {
        contactForm.addEventListener('submit', handleUpdateContacts);
        console.log('‚úÖ Contact form handler added');
    }
    
    if (settingsForm) {
        settingsForm.addEventListener('submit', handleUpdateSettings);
        console.log('‚úÖ Settings form handler added');
    }
    
    // Tab handlers
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabName = this.getAttribute('data-tab');
            console.log('üìë Switching to tab:', tabName);
            switch(tabName) {
                case 'countries':
                    loadCountriesTable();
                    break;
                case 'tours':
                    loadToursTable();
                    loadCountrySelect();
                    break;
                case 'contacts':
                    loadContactsForm();
                    break;
                case 'settings':
                    loadSettingsForm();
                    break;
            }
        });
    });

    // Force refresh button
    const refreshBtn = document.createElement('button');
    refreshBtn.className = 'btn-admin secondary';
    refreshBtn.innerHTML = '<i class="fas fa-sync-alt"></i> –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
    refreshBtn.style.marginLeft = '10px';
    refreshBtn.onclick = forceRefreshData;
    
    const headerActions = document.querySelector('.editor-actions');
    if (headerActions) {
        headerActions.appendChild(refreshBtn);
    }
}

function forceRefreshData() {
    console.log('üîÑ Force refreshing data...');
    if (window.dataManager) {
        window.dataManager.forceRefresh();
        loadAdminData();
        showAdminNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
    } else {
        showAdminNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

function loadAdminData() {
    console.log('üì• Loading admin data...');
    
    if (!window.dataManager) {
        console.error('‚ùå DataManager not available');
        showAdminNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞', 'error');
        return;
    }
    
    const data = window.dataManager.getData();
    console.log('üìä Admin loaded data:', {
        countries: data?.countries?.length || 0,
        tours: data ? window.dataManager.getAllTours().length : 0
    });
    
    if (data) {
        loadCountriesTable();
        loadToursTable();
        loadContactsForm();
        loadSettingsForm();
        showAdminNotification('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
    } else {
        showAdminNotification('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ', 'warning');
        window.dataManager.setDefaultData();
        setTimeout(loadAdminData, 500);
    }
}

function loadCountriesTable() {
    console.log('üåç Loading countries table...');
    
    if (!window.dataManager) return;
    
    const countries = window.dataManager.getCountries();
    const tbody = document.querySelector('#countries-table tbody');
    
    console.log('üìã Countries to display:', countries.length);
    
    if (tbody) {
        if (countries.length > 0) {
            tbody.innerHTML = countries.map(country => `
                <tr>
                    <td><strong>${country.name}</strong></td>
                    <td>${country.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</td>
                    <td><span class="tour-count-badge">${country.tours ? country.tours.length : 0}</span></td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-small" onclick="editCountry(${country.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-small danger" onclick="deleteCountry(${country.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
            console.log('‚úÖ Countries table loaded');
        } else {
            tbody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #999; padding: 40px;">–°—Ç—Ä–∞–Ω—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</td></tr>';
            console.log('üì≠ No countries to display');
        }
    } else {
        console.error('‚ùå Countries table body not found');
    }
}

function loadToursTable() {
    console.log('üó∫Ô∏è Loading tours table...');
    
    if (!window.dataManager) return;
    
    const allTours = window.dataManager.getAllTours();
    const tbody = document.querySelector('#tours-table tbody');
    
    console.log('üìã Tours to display:', allTours.length);
    
    if (tbody) {
        if (allTours.length > 0) {
            tbody.innerHTML = allTours.map(tour => `
                <tr>
                    <td>
                        <div class="tour-info">
                            <strong>${tour.name}</strong>
                            <small>ID: ${tour.id}</small>
                        </div>
                    </td>
                    <td>
                        <span class="country-badge">${tour.countryName}</span>
                    </td>
                    <td>
                        <span class="price-tag">${tour.price}</span>
                    </td>
                    <td>
                        <span class="duration-badge">${tour.duration}</span>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn-small warning" onclick="editTour(${tour.countryId}, ${tour.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-small danger" onclick="deleteTour(${tour.countryId}, ${tour.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
            console.log('‚úÖ Tours table loaded');
        } else {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" style="text-align: center; color: #999; padding: 40px;">
                        <i class="fas fa-map-marked-alt" style="font-size: 3rem; margin-bottom: 15px; display: block; color: #ccc;"></i>
                        <p>–¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        <small>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç—É—Ä –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º—É –≤—ã—à–µ</small>
                    </td>
                </tr>
            `;
            console.log('üì≠ No tours to display');
        }
    } else {
        console.error('‚ùå Tours table body not found');
    }
}

function loadContactsForm() {
    console.log('üìû Loading contacts form...');
    
    if (!window.dataManager) return;
    
    const contacts = window.dataManager.getContacts();
    const form = document.getElementById('contact-form');
    
    console.log('üìã Contacts data:', contacts);
    
    if (form) {
        form.querySelector('#contact-phone').value = contacts.phone || '';
        form.querySelector('#contact-email').value = contacts.email || '';
        form.querySelector('#contact-address').value = contacts.address || '';
        form.querySelector('#contact-hours').value = contacts.hours || '';
        console.log('‚úÖ Contacts form loaded');
    }
}

function loadSettingsForm() {
    console.log('‚öôÔ∏è Loading settings form...');
    
    if (!window.dataManager) return;
    
    const settings = window.dataManager.getSettings();
    const form = document.getElementById('settings-form');
    
    console.log('üìã Settings data:', settings);
    
    if (form) {
        form.querySelector('#site-title').value = settings.siteTitle || '';
        form.querySelector('#company-name').value = settings.companyName || '';
        console.log('‚úÖ Settings form loaded');
    }
}

function loadCountrySelect() {
    console.log('üåç Loading country select...');
    
    if (!window.dataManager) return;
    
    const countries = window.dataManager.getCountries();
    const select = document.getElementById('tour-country');
    
    console.log('üìã Countries for select:', countries.length);
    
    if (select) {
        if (countries.length > 0) {
            select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É --</option>' + 
                countries.map(country => 
                    `<option value="${country.id}">${country.name}</option>`
                ).join('');
            console.log('‚úÖ Country select loaded');
        } else {
            select.innerHTML = '<option value="">–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–∞–Ω—ã</option>';
            console.log('üì≠ No countries for select');
        }
    }
}

// Form handlers with improved validation
function handleAddCountry(e) {
    e.preventDefault();
    console.log('‚ûï Adding new country...');
    
    const form = e.target;
    const formData = new FormData(form);
    
    const countryData = {
        name: formData.get('name').trim(),
        description: formData.get('description').trim()
    };
    
    if (!countryData.name) {
        showAdminNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã', 'error');
        return;
    }
    
    if (!window.dataManager) {
        showAdminNotification('–û—à–∏–±–∫–∞: DataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    const result = window.dataManager.addCountry(countryData);
    if (result) {
        form.reset();
        loadCountriesTable();
        loadCountrySelect();
        showAdminNotification(`–°—Ç—Ä–∞–Ω–∞ "${countryData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, 'success');
        console.log('‚úÖ Country added:', countryData.name);
    } else {
        showAdminNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã', 'error');
        console.error('‚ùå Failed to add country');
    }
}

function handleAddTour(e) {
    e.preventDefault();
    console.log('‚ûï Adding new tour...');
    
    const form = e.target;
    const formData = new FormData(form);
    
    const tourData = {
        name: formData.get('name').trim(),
        price: formData.get('price').trim(),
        duration: formData.get('duration').trim()
    };
    
    const countryId = parseInt(formData.get('country'));
    
    // Validation
    if (!tourData.name) {
        showAdminNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞', 'error');
        return;
    }
    
    if (!tourData.price) {
        showAdminNotification('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç—É—Ä–∞', 'error');
        return;
    }
    
    if (!tourData.duration) {
        showAdminNotification('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–∞', 'error');
        return;
    }
    
    if (!countryId) {
        showAdminNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É', 'error');
        return;
    }
    
    if (!window.dataManager) {
        showAdminNotification('–û—à–∏–±–∫–∞: DataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    const result = window.dataManager.addTour(countryId, tourData);
    if (result) {
        form.reset();
        loadToursTable();
        showAdminNotification(`–¢—É—Ä "${tourData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');
        console.log('‚úÖ Tour added:', tourData.name);
    } else {
        showAdminNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞', 'error');
        console.error('‚ùå Failed to add tour');
    }
}

function handleUpdateContacts(e) {
    e.preventDefault();
    console.log('üìû Updating contacts...');
    
    const form = e.target;
    const formData = new FormData(form);
    
    const contactData = {
        phone: formData.get('phone').trim(),
        email: formData.get('email').trim(),
        address: formData.get('address').trim(),
        hours: formData.get('hours').trim()
    };
    
    if (!window.dataManager) {
        showAdminNotification('–û—à–∏–±–∫–∞: DataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    window.dataManager.updateContacts(contactData);
    showAdminNotification('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
    console.log('‚úÖ Contacts updated');
}

function handleUpdateSettings(e) {
    e.preventDefault();
    console.log('‚öôÔ∏è Updating settings...');
    
    const form = e.target;
    const formData = new FormData(form);
    
    const settingsData = {
        siteTitle: formData.get('siteTitle').trim(),
        companyName: formData.get('companyName').trim()
    };
    
    if (!window.dataManager) {
        showAdminNotification('–û—à–∏–±–∫–∞: DataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        return;
    }
    
    window.dataManager.updateSettings(settingsData);
    showAdminNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
    console.log('‚úÖ Settings updated');
}

// Country management functions
function editCountry(countryId) {
    console.log('‚úèÔ∏è Editing country:', countryId);
    
    if (!window.dataManager) return;
    
    const countries = window.dataManager.getCountries();
    const country = countries.find(c => c.id === countryId);
    
    if (country) {
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:', country.name);
        if (newName === null) return;
        
        const newDesc = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', country.description || '');
        if (newDesc === null) return;
        
        if (newName.trim()) {
            window.dataManager.updateCountry(countryId, {
                name: newName.trim(),
                description: newDesc.trim()
            });
            loadCountriesTable();
            loadCountrySelect();
            loadToursTable();
            showAdminNotification('–°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
            console.log('‚úÖ Country updated');
        } else {
            showAdminNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error');
        }
    }
}

function deleteCountry(countryId) {
    console.log('üóëÔ∏è Deleting country:', countryId);
    
    if (!window.dataManager) return;
    
    const countries = window.dataManager.getCountries();
    const country = countries.find(c => c.id === countryId);
    
    if (!country) return;
    
    const tourCount = country.tours ? country.tours.length : 0;
    const message = tourCount > 0 
        ? `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É "${country.name}"? –í—Å–µ ${tourCount} —Ç—É—Ä–æ–≤ –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`
        : `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É "${country.name}"?`;
    
    if (confirm(message)) {
        if (window.dataManager.deleteCountry(countryId)) {
            loadCountriesTable();
            loadToursTable();
            loadCountrySelect();
            showAdminNotification('–°—Ç—Ä–∞–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success');
            console.log('‚úÖ Country deleted');
        } else {
            showAdminNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã', 'error');
        }
    }
}

// Tour management functions
function editTour(countryId, tourId) {
    console.log('‚úèÔ∏è Editing tour:', tourId, 'in country:', countryId);
    
    if (!window.dataManager) return;
    
    const allTours = window.dataManager.getAllTours();
    const tour = allTours.find(t => t.id === tourId && t.countryId === countryId);
    
    if (tour) {
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞:', tour.name);
        if (newName === null) return;
        
        const newPrice = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:', tour.price);
        if (newPrice === null) return;
        
        const newDuration = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', tour.duration);
        if (newDuration === null) return;
        
        if (newName.trim() && newPrice && newDuration.trim()) {
            // Delete old tour and create new one
            if (window.dataManager.deleteTour(countryId, tourId)) {
                window.dataManager.addTour(countryId, {
                    name: newName.trim(),
                    price: newPrice.trim(),
                    duration: newDuration.trim()
                });
                loadToursTable();
                showAdminNotification('–¢—É—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
                console.log('‚úÖ Tour updated');
            }
        } else {
            showAdminNotification('–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', 'error');
        }
    }
}

function deleteTour(countryId, tourId) {
    console.log('üóëÔ∏è Deleting tour:', tourId, 'from country:', countryId);
    
    if (!window.dataManager) return;
    
    const allTours = window.dataManager.getAllTours();
    const tour = allTours.find(t => t.id === tourId && t.countryId === countryId);
    
    if (tour && confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä "${tour.name}"?`)) {
        if (window.dataManager.deleteTour(countryId, tourId)) {
            loadToursTable();
            showAdminNotification('–¢—É—Ä —É–¥–∞–ª–µ–Ω!', 'success');
            console.log('‚úÖ Tour deleted');
        } else {
            showAdminNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–∞', 'error');
        }
    }
}

// Notification system
function showAdminNotification(message, type = 'info') {
    console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
    
    // Remove existing notifications
    document.querySelectorAll('.admin-notification').forEach(n => n.remove());
    
    const notification = document.createElement('div');
    const bgColor = type === 'error' ? '#dc3545' : type === 'warning' ? '#ffc107' : type === 'success' ? '#28a745' : '#007bff';
    const textColor = type === 'warning' ? '#000' : '#fff';
    
    notification.className = 'admin-notification';
    notification.innerHTML = `
        <div style="
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${bgColor};
            color: ${textColor};
            padding: 15px 20px;
            border-radius: 10px;
            z-index: 10000;
            animation: slideInRight 0.3s ease;
            max-width: 400px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 10px;
            font-weight: 500;
        ">
            <i class="fas fa-${type === 'error' ? 'exclamation-triangle' : type === 'warning' ? 'exclamation-circle' : type === 'success' ? 'check-circle' : 'info-circle'}"></i>
            ${message}
            <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: inherit; cursor: pointer; margin-left: 10px;">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// Add CSS for notifications if not exists
if (!document.querySelector('#admin-notification-styles')) {
    const style = document.createElement('style');
    style.id = 'admin-notification-styles';
    style.textContent = `
        @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `;
    document.head.appendChild(style);
}

// Debug function
window.debugAdmin = function() {
    console.log('üîç Admin Debug Info:');
    console.log('- DataManager available:', !!window.dataManager);
    if (window.dataManager) {
        window.dataManager.debugData();
    }
    console.log('- Countries table:', document.querySelector('#countries-table tbody')?.children.length || 0, 'rows');
    console.log('- Tours table:', document.querySelector('#tours-table tbody')?.children.length || 0, 'rows');
};

console.log('‚úÖ Admin JS loaded successfully');



=== FILE: ./enhanced-editor.js ===
// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É—Å–ª—É–≥
class EnhancedEditor {
    constructor() {
        this.init();
    }

    init() {
        console.log('üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
        this.injectStatsEditor();
        this.injectServicesEditor();
    }

    injectStatsEditor() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
        const originalShowContentEditor = window.editor?.showContentEditor;
        if (window.editor && originalShowContentEditor) {
            window.editor.showContentEditor = function() {
                originalShowContentEditor.call(this);
                this.enhanceStatsEditing();
            }.bind(window.editor);
        }
    }

    injectServicesEditor() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —É—Å–ª—É–≥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
        const originalShowContentEditor = window.editor?.showContentEditor;
        if (window.editor && originalShowContentEditor) {
            window.editor.showContentEditor = function() {
                originalShowContentEditor.call(this);
                this.enhanceServicesEditing();
            }.bind(window.editor);
        }
    }
}

// –†–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
if (window.editor) {
    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.editor.enhanceStatsEditing = function() {
        if (this.currentSection?.id === 'about') {
            const contentEditor = document.getElementById('content-editor');
            const statsSection = contentEditor.querySelector('.stats-editor');
            
            if (!statsSection) {
                this.injectStatsEditorUI(contentEditor);
            }
        }
    };

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    window.editor.enhanceServicesEditing = function() {
        if (this.currentSection?.id === 'services') {
            const contentEditor = document.getElementById('content-editor');
            const servicesSection = contentEditor.querySelector('.services-editor');
            
            if (!servicesSection) {
                this.injectServicesEditorUI(contentEditor);
            }
        }
    };

    // –í–Ω–µ–¥—Ä—è–µ–º UI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    window.editor.injectStatsEditorUI = function(container) {
        const stats = this.currentData.content?.about?.stats || [];
        
        const statsHTML = `
            <div class="stats-editor">
                <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π</h4>
                <div class="admin-hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>
                <div id="stats-list">
                    ${stats.map((stat, index) => `
                        <div class="stat-row" data-index="${index}">
                            <input type="text" class="form-control" value="${stat.value}" placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ" onchange="editor.updateStat(${index}, 'value', this.value)">
                            <input type="text" class="form-control" value="${stat.label}" placeholder="–ü–æ–¥–ø–∏—Å—å" onchange="editor.updateStat(${index}, 'label', this.value)">
                            <button class="btn-small danger" onclick="editor.removeStat(${index})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('')}
                </div>
                <div class="dynamic-items-controls">
                    <button class="btn-admin" onclick="editor.addStat()">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    </button>
                </div>
            </div>
        `;

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
        const descriptionField = container.querySelector('[data-field="description"]');
        if (descriptionField) {
            descriptionField.closest('.form-group').insertAdjacentHTML('afterend', statsHTML);
        }
    };

    // –í–Ω–µ–¥—Ä—è–µ–º UI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —É—Å–ª—É–≥
    window.editor.injectServicesEditorUI = function(container) {
        const services = this.currentData.content?.services?.services || [];
        
        const servicesHTML = `
            <div class="services-editor">
                <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</h4>
                <div class="admin-hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ —É—Å–ª—É–≥–∏</div>
                <div id="services-list">
                    ${services.map((service, index) => `
                        <div class="service-row" data-index="${index}">
                            <input type="text" class="form-control" value="${service.title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" onchange="editor.updateService(${index}, 'title', this.value)">
                            <textarea class="form-control" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏" onchange="editor.updateService(${index}, 'description', this.value)">${service.description}</textarea>
                            <input type="text" class="form-control" value="${service.icon}" placeholder="–ò–∫–æ–Ω–∫–∞ (fas fa-...)" onchange="editor.updateService(${index}, 'icon', this.value)">
                            <button class="btn-small danger" onclick="editor.removeService(${index})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('')}
                </div>
                <div class="dynamic-items-controls">
                    <button class="btn-admin" onclick="editor.addService()">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
                    </button>
                </div>
            </div>
        `;

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const titleField = container.querySelector('[data-field="title"]');
        if (titleField) {
            titleField.closest('.form-group').insertAdjacentHTML('afterend', servicesHTML);
        }
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    window.editor.addStat = function() {
        if (!this.currentData.content.about) this.currentData.content.about = {};
        if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
        
        this.currentData.content.about.stats.push({ 
            value: '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 
            label: '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å' 
        });
        
        this.saveData();
        this.showContentEditor();
        this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    };

    window.editor.updateStat = function(index, field, value) {
        if (this.currentData.content?.about?.stats?.[index]) {
            this.currentData.content.about.stats[index][field] = value;
            this.saveData();
            this.hasUnsavedChanges = true;
        }
    };

    window.editor.removeStat = function(index) {
        if (this.currentData.content?.about?.stats?.[index]) {
            this.currentData.content.about.stats.splice(index, 1);
            this.saveData();
            this.showContentEditor();
            this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
    window.editor.addService = function() {
        if (!this.currentData.content.services) this.currentData.content.services = {};
        if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
        
        this.currentData.content.services.services.push({ 
            title: '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞', 
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏',
            icon: 'fas fa-star'
        });
        
        this.saveData();
        this.showContentEditor();
        this.showNotification('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    };

    window.editor.updateService = function(index, field, value) {
        if (this.currentData.content?.services?.services?.[index]) {
            this.currentData.content.services.services[index][field] = value;
            this.saveData();
            this.hasUnsavedChanges = true;
        }
    };

    window.editor.removeService = function(index) {
        if (this.currentData.content?.services?.services?.[index]) {
            this.currentData.content.services.services.splice(index, 1);
            this.saveData();
            this.showContentEditor();
            this.showNotification('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
new EnhancedEditor();



=== FILE: ./admin-login.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login - WorldTravel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .login-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 400px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .login-box h2 {
            color: white;
            text-align: center;
            margin-bottom: 30px;
            font-size: 28px;
        }

        .user-box {
            position: relative;
            margin-bottom: 30px;
        }

        .user-box input {
            width: 100%;
            padding: 10px 0;
            font-size: 16px;
            color: white;
            margin-bottom: 30px;
            border: none;
            border-bottom: 1px solid white;
            outline: none;
            background: transparent;
        }

        .user-box label {
            position: absolute;
            top: 0;
            left: 0;
            padding: 10px 0;
            font-size: 16px;
            color: white;
            pointer-events: none;
            transition: 0.5s;
        }

        .user-box input:focus ~ label,
        .user-box input:valid ~ label {
            top: -20px;
            left: 0;
            color: #03e9f4;
            font-size: 12px;
        }

        button {
            background: transparent;
            border: 1px solid white;
            color: white;
            padding: 12px 30px;
            text-transform: uppercase;
            letter-spacing: 2px;
            border-radius: 25px;
            cursor: pointer;
            transition: 0.5s;
            width: 100%;
            font-size: 16px;
            margin-top: 20px;
        }

        button:hover {
            background: white;
            color: #667eea;
        }

        .message {
            padding: 15px;
            margin: 20px 0;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
        }

        .message.success {
            background: rgba(46, 204, 113, 0.2);
            color: #2ecc71;
            border: 1px solid #2ecc71;
        }

        .message.error {
            background: rgba(231, 76, 60, 0.2);
            color: #e74c3c;
            border: 1px solid #e74c3c;
        }

        .code-inputs {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
        }

        .code-inputs input {
            width: 45px;
            height: 45px;
            text-align: center;
            font-size: 20px;
            border: 2px solid white;
            background: transparent;
            color: white;
            border-radius: 8px;
        }

        .hidden {
            display: none;
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-box">
            <h2>Admin Login</h2>
            
            <div id="loginSection">
                <div class="user-box">
                    <input type="text" id="username" required>
                    <label>–õ–æ–≥–∏–Ω</label>
                </div>
                <div class="user-box">
                    <input type="password" id="password" required>
                    <label>–ü–∞—Ä–æ–ª—å</label>
                </div>
                <button type="button" onclick="handleLogin()">–í–æ–π—Ç–∏</button>
            </div>

            <div id="codeSection" class="hidden">
                <div class="message info">
                    –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É narekgrigoryan424@gmail.com
                </div>
                <div class="code-inputs">
                    <input type="text" maxlength="1" oninput="moveToNext(this, 1)">
                    <input type="text" maxlength="1" oninput="moveToNext(this, 2)">
                    <input type="text" maxlength="1" oninput="moveToNext(this, 3)">
                    <input type="text" maxlength="1" oninput="moveToNext(this, 4)">
                    <input type="text" maxlength="1" oninput="moveToNext(this, 5)">
                    <input type="text" maxlength="1" oninput="moveToNext(this, 6)">
                </div>
                <button type="button" onclick="verifyCode()">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥</button>
                <button type="button" onclick="goBackToLogin()" style="background: transparent; margin-top: 10px;">–ù–∞–∑–∞–¥</button>
            </div>

            <div id="message" class="message"></div>
        </div>
    </div>

    <script>
   let currentAuthCode = '';
let currentUsername = '';

async function handleLogin() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    if (username !== 'admin' || password !== 'admin') {
        showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error');
        return;
    }

    showMessage('–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É...', 'success');
    setLoadingState(true);

    try {
        currentAuthCode = Math.floor(100000 + Math.random() * 900000).toString();
        currentUsername = username;
        
        console.log('üîê GENERATED CODE:', currentAuthCode);

        // –í–†–ï–ú–ï–ù–ù–û –ü–†–û–ü–£–°–ö–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ EMAIL - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
        console.log('üìß Email sending skipped for testing');
        
        showMessage('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥: ' + currentAuthCode, 'success');
        document.getElementById('loginSection').classList.add('hidden');
        document.getElementById('codeSection').classList.remove('hidden');
        clearCodeInputs();
        document.querySelector('.code-inputs input').focus();
        
    } catch (error) {
        console.error('Error:', error);
        showMessage('‚ùå –û—à–∏–±–∫–∞', 'error');
    } finally {
        setLoadingState(false);
    }
}

function moveToNext(input, nextIndex) {
    const inputs = document.querySelectorAll('.code-inputs input');
    
    if (input.value.length === 1 && nextIndex < inputs.length) {
        inputs[nextIndex].focus();
    }
    
    const allFilled = Array.from(inputs).every(input => input.value.length === 1);
    if (allFilled) {
        verifyCode();
    }
}

function verifyCode() {
    const inputs = document.querySelectorAll('.code-inputs input');
    const enteredCode = Array.from(inputs).map(input => input.value).join('');
    
    if (enteredCode.length !== 6) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ 6 —Ü–∏—Ñ—Ä –∫–æ–¥–∞', 'error');
        return;
    }

    setLoadingState(true);

    setTimeout(() => {
        if (enteredCode === currentAuthCode) {
            showMessage('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...', 'success');
            
            // –°–û–•–†–ê–ù–Ø–ï–ú –í SessionStorage (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ)
            sessionStorage.setItem('adminAuthenticated', 'true');
            sessionStorage.setItem('adminUsername', currentUsername);
            sessionStorage.setItem('authTime', Date.now().toString());
            
            // –î–£–ë–õ–ò–†–£–ï–ú –í LocalStorage
            localStorage.setItem('adminAuthenticated', 'true');
            localStorage.setItem('adminUsername', currentUsername);
            localStorage.setItem('authTime', Date.now().toString());
            
            console.log('üíæ SAVED TO STORAGE:');
            console.log('SessionStorage:', {
                auth: sessionStorage.getItem('adminAuthenticated'),
                user: sessionStorage.getItem('adminUsername')
            });
            console.log('LocalStorage:', {
                auth: localStorage.getItem('adminAuthenticated'),
                user: localStorage.getItem('adminUsername')
            });
            
            // –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –°–†–ê–ó–£
            console.log('üîÑ REDIRECTING TO ADMIN.HTML');
            window.location.href = 'admin.html';
            
        } else {
            showMessage('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'error');
            shakeCodeInputs();
        }
        setLoadingState(false);
    }, 500);
}

function goBackToLogin() {
    document.getElementById('codeSection').classList.add('hidden');
    document.getElementById('loginSection').classList.remove('hidden');
    showMessage('', '');
    currentAuthCode = '';
}

function clearCodeInputs() {
    const inputs = document.querySelectorAll('.code-inputs input');
    inputs.forEach(input => input.value = '');
}

function shakeCodeInputs() {
    const container = document.querySelector('.code-inputs');
    container.style.animation = 'shake 0.5s';
    setTimeout(() => {
        container.style.animation = '';
        clearCodeInputs();
        document.querySelector('.code-inputs input').focus();
    }, 500);
}

function setLoadingState(loading) {
    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => {
        button.disabled = loading;
        button.classList.toggle('loading', loading);
    });
}

function showMessage(text, type) {
    const messageEl = document.getElementById('message');
    messageEl.textContent = text;
    messageEl.className = 'message';
    if (type) {
        messageEl.classList.add(type);
    }
}

// –ê–Ω–∏–º–∞—Ü–∏—è —Ç—Ä—è—Å–∫–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }
`;
document.head.appendChild(style);

// –ê–≤—Ç–æ—Ñ–æ–∫—É—Å
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('username').focus();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
document.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        if (!document.getElementById('codeSection').classList.contains('hidden')) {
            verifyCode();
        } else {
            handleLogin();
        }
    }
});
    </script>
</body>
</html>


=== FILE: ./index.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WorldTravel - –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è</title>
    <link rel="stylesheet" href="style.css?v=4">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Header -->
    <header class="header">
        <nav class="nav">
            <div class="logo">
                <h2><i class="fas fa-globe-americas"></i> WorldTravel</h2>
            </div>
            <ul class="nav-links">
                <li><a href="#home">–ì–ª–∞–≤–Ω–∞—è</a></li>
                <li><a href="#about">–û –Ω–∞—Å</a></li>
                <li><a href="#services">–£—Å–ª—É–≥–∏</a></li>
                <li><a href="#destinations">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></li>
                <li><a href="#contact">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a></li>
                <li>
                    <a href="admin-login.html" class="admin-link"><i class="fas fa-cog"></i> –ê–¥–º–∏–Ω–∫–∞</a>
                </li>
            </ul>
            <div class="hamburger">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </nav>
    </header>

    <!-- Hero Section -->
    <section id="home" class="hero">
        <div class="hero-content">
            <h1 class="animate-fade-in">–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä —Å WorldTravel</h1>
            <p class="animate-fade-in-delay">–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –û—Ç —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª—è–∂–µ–π –¥–æ –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω - –≤–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å.</p>
            <button class="cta-button animate-bounce" onclick="scrollToDestinations()">–ù–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</button>
        </div>
        <div class="hero-image" style="margin-left: 100px;">
            <div class="floating-element element-1"><i class="fas fa-plane"></i></div>
            <div class="floating-element element-2"><i class="fas fa-map-marked-alt"></i></div>
            <div class="floating-element element-3"><i class="fas fa-passport"></i></div>
            <div class="image-placeholder pulse-animation">
                <img src="images/travel-placeholder.svg" alt="–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" style="width: 100%; height: 100%; object-fit: cover; border-radius: 20px;">
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section id="about" class="about">
        <div class="container">
            <h2 class="section-title">–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</h2>
            <div class="about-content">
                <div class="about-text">
                    <p>WorldTravel - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ —Ç—É—Ä–∏–∑–º—É —Å –±–æ–ª–µ–µ —á–µ–º 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö travel-—Ä–µ—à–µ–Ω–∏–π.</p>
                    <div class="stats">
                        <div class="stat animate-counter" data-target="5000">
                            <h3>5000</h3>
                            <p>–î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
                        </div>
                        <div class="stat animate-counter" data-target="50">
                            <h3>50</h3>
                            <p>–°—Ç—Ä–∞–Ω –º–∏—Ä–∞</p>
                        </div>
                        <div class="stat">
                            <h3>10 –ª–µ—Ç</h3>
                            <p>–û–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã</p>
                        </div>
                    </div>
                </div>
                <div class="about-image">
                    <div class="image-placeholder rotate-animation">
                        <img src="images/travel-placeholder.svg" alt="–ö–æ–º–∞–Ω–¥–∞ WorldTravel" style="width: 100%; height: 100%; object-fit: cover; border-radius: 20px;">
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Services Section -->
    <section id="services" class="services">
        <div class="container">
            <h2 class="section-title">–ù–∞—à–∏ —É—Å–ª—É–≥–∏</h2>
            <div class="services-grid">
                <div class="service-card slide-in-left">
                    <div class="service-icon"><i class="fas fa-plane"></i></div>
                    <h3>–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã</h3>
                    <p>–ü–æ–¥–±–æ—Ä –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–æ–≤ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º</p>
                </div>
                <div class="service-card slide-in-bottom">
                    <div class="service-icon"><i class="fas fa-hotel"></i></div>
                    <h3>–û—Ç–µ–ª–∏</h3>
                    <p>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª–µ–π –ª—é–±–æ–≥–æ —É—Ä–æ–≤–Ω—è –∫–æ–º—Ñ–æ—Ä—Ç–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É</p>
                </div>
                <div class="service-card slide-in-right">
                    <div class="service-icon"><i class="fas fa-map-marked-alt"></i></div>
                    <h3>–¢—É—Ä—ã</h3>
                    <p>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—É—Ä—ã —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≥–∏–¥–∞–º–∏</p>
                </div>
                <div class="service-card slide-in-top">
                    <div class="service-icon"><i class="fas fa-shield-alt"></i></div>
                    <h3>–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ</h3>
                    <p>–ü–æ–ª–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Destinations Section -->
    <section id="destinations" class="destinations">
        <div class="container">
            <h2 class="section-title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
            <p class="section-subtitle">–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—É—á—à–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏—Ä–∞ —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏</p>
            
            <div class="search-box">
                <input type="text" class="search-input" placeholder="üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω –∏–ª–∏ —Ç—É—Ä–æ–≤...">
            </div>

            <div class="loading-message" id="destinations-loading">
                <i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...
            </div>
            <div class="destinations-grid" id="destinations-grid">
                <!-- –°—Ç—Ä–∞–Ω—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ JavaScript -->
            </div>
            <div class="error-message" id="destinations-error" style="display: none;">
                <i class="fas fa-exclamation-triangle"></i> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="contact">
        <div class="container">
            <h2 class="section-title">–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</h2>
            <div class="contact-content">
                <div class="contact-info">
                    <h3>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                    <div class="contact-item">
                        <i class="fas fa-phone"></i>
                        <div>
                            <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong>
                            <p>+7 (999) 123-45-67</p>
                        </div>
                    </div>
                    <div class="contact-item">
                        <i class="fas fa-envelope"></i>
                        <div>
                            <strong>Email:</strong>
                            <p>info@worldtravel.com</p>
                        </div>
                    </div>
                    <div class="contact-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <div>
                            <strong>–ê–¥—Ä–µ—Å:</strong>
                            <p>–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15</p>
                        </div>
                    </div>
                    <div class="contact-item">
                        <i class="fas fa-clock"></i>
                        <div>
                            <strong>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</strong>
                            <p>–ü–Ω-–ü—Ç: 9:00-18:00</p>
                        </div>
                    </div>
                </div>
                <form class="contact-form">
                    <input type="text" placeholder="–í–∞—à–µ –∏–º—è" required>
                    <input type="email" placeholder="–í–∞—à email" required>
                    <input type="tel" placeholder="–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω">
                    <textarea placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" rows="5" required></textarea>
                    <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
                </form>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3><i class="fas fa-globe-americas"></i> WorldTravel</h3>
                    <p>–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π. –ú—ã –¥–µ–ª–∞–µ–º –≤–∞—à–∏ –º–µ—á—Ç—ã –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é.</p>
                </div>
                <div class="footer-section">
                    <h4>–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏</h4>
                    <ul>
                        <li><a href="#home">–ì–ª–∞–≤–Ω–∞—è</a></li>
                        <li><a href="#about">–û –Ω–∞—Å</a></li>
                        <li><a href="#services">–£—Å–ª—É–≥–∏</a></li>
                        <li><a href="#destinations">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è</a></li>
                        <li><a href="#contact">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
                    <p><i class="fas fa-phone"></i> +7 (999) 123-45-67</p>
                    <p><i class="fas fa-envelope"></i> info@worldtravel.com</p>
                    <p><i class="fas fa-map-marker-alt"></i> –ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15</p>
                    <p><i class="fas fa-clock"></i> –ü–Ω-–ü—Ç: 9:00-18:00</p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2024 WorldTravel. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
        </div>
    </footer>

    <!-- Scripts in correct order -->
    <script src="data-manager.js?v=4"></script>
    <script src="update-content.js?v=8"></script>
    <script src="script.js?v=4"></script>
    <script src="fix-data-structure.js"></script>
            <script src="enhanced-content-updater-fixed.js"></script>
    <script src="super-editor-fixed.js"></script>
</body>
</html>



=== FILE: ./enhanced-update-content.js ===
// Enhanced content updater with support for all editable sections
function ContentUpdater() {
    this.appliedChanges = new Set();
    this.init();
}

ContentUpdater.prototype.init = function() {
    console.log('üöÄ Enhanced ContentUpdater initialized');
    
    var self = this;
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() { self.applyAllChanges(); }, 100);
        });
    } else {
        setTimeout(function() { self.applyAllChanges(); }, 100);
    }

    window.addEventListener('dataUpdated', function(e) {
        console.log('üîÑ Data update received:', e.detail);
        setTimeout(function() { self.applyAllChanges(); }, 50);
    });

    setInterval(function() { self.applyAllChanges(); }, 2000);

    if (window.location.search.includes('editor=true')) {
        setTimeout(function() { self.applyAllChanges(); }, 500);
    }
};

ContentUpdater.prototype.applyAllChanges = function() {
    if (!window.dataManager) {
        console.log('‚è≥ Waiting for DataManager...');
        this.applyLocalChanges();
        return;
    }

    var data = window.dataManager.getData();
    if (!data) {
        console.log('üì≠ No data available');
        this.applyLocalChanges();
        return;
    }

    var changeHash = this.getDataHash(data);
    if (this.appliedChanges.has(changeHash)) {
        return;
    }

    console.log('üîÑ Applying changes from DataManager...');
    
    this.applyContentChanges(data.content);
    this.applyContactChanges(data.contacts);
    this.applySettingsChanges(data.settings);
    this.applyCustomSections(data);
    
    this.appliedChanges.add(changeHash);
    console.log('‚úÖ Changes applied successfully');
};

ContentUpdater.prototype.applyLocalChanges = function() {
    var localData = localStorage.getItem('worldtravel_data');
    if (localData) {
        try {
            var data = JSON.parse(localData);
            console.log('üìÅ Applying local changes...');
            this.applyContentChanges(data.content);
            this.applyContactChanges(data.contacts);
            this.applySettingsChanges(data.settings);
            this.applyCustomSections(data);
        } catch (error) {
            console.error('‚ùå Error applying local changes:', error);
        }
    }
};

ContentUpdater.prototype.getDataHash = function(data) {
    return JSON.stringify({
        content: data.content,
        contacts: data.contacts,
        settings: data.settings,
        pageStructure: data.pageStructure,
        timestamp: data.lastUpdate
    });
};

ContentUpdater.prototype.applyContentChanges = function(content) {
    if (!content) return;

    console.log('üìù Applying content changes to all sections');

    // Hero section
    if (content.hero) {
        this.updateElement('#home h1, .hero h1, section:first-of-type h1', content.hero.title);
        this.updateElement('#home p, .hero p, section:first-of-type p', content.hero.subtitle);
        if (content.hero.image) {
            this.updateImages('.hero-image img, .image-placeholder img', content.hero.image);
        }
    }

    // About section
    if (content.about) {
        this.updateElement('#about .section-title, .about .section-title, section:nth-of-type(2) .section-title', content.about.title);
        this.updateElement('.about-text p, #about p, .about p, section:nth-of-type(2) p', content.about.description);
        
        if (content.about.image) {
            this.updateImages('.about-image img, .image-placeholder img', content.about.image);
        }
        
        this.updateNavigation('about', content.about.title);
        
        if (content.about.stats) {
            this.updateStats(content.about.stats);
        }
    }

    // Services section
    if (content.services) {
        this.updateElement('#services .section-title, .services .section-title, section:nth-of-type(3) .section-title', content.services.title);
        this.updateNavigation('services', content.services.title);
        
        if (content.services.services) {
            this.updateServices(content.services.services);
        }
    }

    // Destinations section
    if (content.destinations) {
        this.updateElement('#destinations .section-title, .destinations .section-title, section:nth-of-type(4) .section-title', content.destinations.title);
        this.updateElement('.destinations .section-subtitle, .section-subtitle, section:nth-of-type(4) .section-subtitle', content.destinations.subtitle);
        this.updateNavigation('destinations', content.destinations.title);
    }

    // Contact section
    if (content.contact) {
        this.updateElement('#contact .section-title, .contact .section-title, section:nth-of-type(5) .section-title', content.contact.title);
        this.updateNavigation('contact', content.contact.title);
    }

    // Footer section
    if (content.footer) {
        this.updateElement('.footer-section:first-child p:first-child', content.footer.description);
        this.updateElement('.footer-bottom p', content.footer.copyright, true);
    }

    // Custom sections
    this.applyCustomSectionsData(content);
};

ContentUpdater.prototype.applyCustomSectionsData = function(content) {
    var self = this;
    Object.keys(content).forEach(function(sectionId) {
        if (sectionId.startsWith('section-')) {
            var sectionData = content[sectionId];
            var sectionElement = document.getElementById(sectionId);
            
            if (sectionElement) {
                // Update custom section content based on type
                switch (sectionData.type) {
                    case 'text':
                        self.updateElement('#' + sectionId + ' .section-title', sectionData.title);
                        self.updateElement('#' + sectionId + ' .section-content p', sectionData.content);
                        break;
                    case 'image':
                        self.updateElement('#' + sectionId + ' .section-title', sectionData.title);
                        self.updateElement('#' + sectionId + ' .text-content p', sectionData.content);
                        if (sectionData.image) {
                            self.updateImages('#' + sectionId + ' .image-content img', sectionData.image);
                        }
                        break;
                    case 'features':
                        self.updateElement('#' + sectionId + ' .section-title', sectionData.title);
                        if (sectionData.features) {
                            self.updateFeatures('#' + sectionId + ' .features-grid', sectionData.features);
                        }
                        break;
                    case 'cta':
                        self.updateElement('#' + sectionId + ' h2', sectionData.title);
                        self.updateElement('#' + sectionId + ' p', sectionData.description);
                        if (sectionData.buttonText) {
                            self.updateElement('#' + sectionId + ' .cta-button', sectionData.buttonText);
                            var button = document.querySelector('#' + sectionId + ' .cta-button');
                            if (button && sectionData.buttonUrl) {
                                button.href = sectionData.buttonUrl;
                            }
                        }
                        break;
                }
            }
        }
    });
};

ContentUpdater.prototype.updateElement = function(selector, content, isHTML) {
    var elements = document.querySelectorAll(selector);
    if (elements.length > 0) {
        elements.forEach(function(element) {
            if (isHTML) {
                element.innerHTML = content;
            } else {
                element.textContent = content;
            }
        });
    }
};

ContentUpdater.prototype.updateImages = function(selector, src) {
    var elements = document.querySelectorAll(selector);
    if (elements.length > 0) {
        elements.forEach(function(element) {
            element.src = src;
        });
    }
};

ContentUpdater.prototype.updateNavigation = function(sectionId, title) {
    var navLinks = document.querySelectorAll('.nav-links a[href="#' + sectionId + '"]');
    if (navLinks.length > 0) {
        navLinks.forEach(function(link) {
            link.textContent = title;
        });
    }
};

ContentUpdater.prototype.updateStats = function(stats) {
    var statElements = document.querySelectorAll('.stat');
    if (statElements.length >= stats.length) {
        stats.forEach(function(stat, index) {
            if (statElements[index]) {
                var valueElement = statElements[index].querySelector('h3');
                var labelElement = statElements[index].querySelector('p');
                if (valueElement) valueElement.textContent = stat.value;
                if (labelElement) labelElement.textContent = stat.label;
            }
        });
    }
};

ContentUpdater.prototype.updateServices = function(services) {
    var serviceCards = document.querySelectorAll('.service-card');
    if (serviceCards.length >= services.length) {
        services.forEach(function(service, index) {
            if (serviceCards[index]) {
                var titleElement = serviceCards[index].querySelector('h3');
                var descElement = serviceCards[index].querySelector('p');
                var iconElement = serviceCards[index].querySelector('.service-icon i');
                
                if (titleElement) titleElement.textContent = service.title;
                if (descElement) descElement.textContent = service.description;
                if (iconElement && service.icon) {
                    iconElement.className = service.icon;
                }
            }
        });
    }
};

ContentUpdater.prototype.updateFeatures = function(selector, features) {
    var container = document.querySelector(selector);
    if (container) {
        var featureItems = container.querySelectorAll('.feature-item');
        if (featureItems.length >= features.length) {
            features.forEach(function(feature, index) {
                if (featureItems[index]) {
                    var titleElement = featureItems[index].querySelector('h3');
                    var descElement = featureItems[index].querySelector('p');
                    var iconElement = featureItems[index].querySelector('.feature-icon i');
                    
                    if (titleElement) titleElement.textContent = feature.title;
                    if (descElement) descElement.textContent = feature.description;
                    if (iconElement && feature.icon) {
                        iconElement.className = feature.icon;
                    }
                }
            });
        }
    }
};

ContentUpdater.prototype.applyContactChanges = function(contacts) {
    if (!contacts) return;

    if (contacts.phone) {
        this.updateElement('.contact-info .contact-item:nth-child(1) p, .contact-item:first-child p', contacts.phone);
    }
    if (contacts.email) {
        this.updateElement('.contact-info .contact-item:nth-child(2) p, .contact-item:nth-child(2) p', contacts.email);
    }
    if (contacts.address) {
        this.updateElement('.contact-info .contact-item:nth-child(3) p, .contact-item:nth-child(3) p', contacts.address);
    }
    if (contacts.hours) {
        this.updateElement('.contact-info .contact-item:nth-child(4) p, .contact-item:nth-child(4) p', contacts.hours);
    }
};

ContentUpdater.prototype.applySettingsChanges = function(settings) {
    if (!settings) return;

    if (settings.siteTitle) {
        document.title = settings.siteTitle;
    }
};

ContentUpdater.prototype.applyCustomSections = function(data) {
    if (!data.pageStructure || !data.content) return;

    var customSectionsContainer = document.getElementById('custom-sections');
    if (!customSectionsContainer) {
        customSectionsContainer = document.createElement('div');
        customSectionsContainer.id = 'custom-sections';
        var footer = document.querySelector('footer');
        if (footer) {
            footer.parentNode.insertBefore(customSectionsContainer, footer);
        }
    }

    customSectionsContainer.innerHTML = '';

    var self = this;
    data.pageStructure.forEach(function(sectionId) {
        if (sectionId.startsWith('section-') && data.content[sectionId]) {
            self.renderCustomSection(customSectionsContainer, data.content[sectionId]);
        }
    });
};

ContentUpdater.prototype.renderCustomSection = function(container, sectionData) {
    var sectionElement = document.createElement('section');
    sectionElement.className = 'custom-section ' + sectionData.type + '-section';
    sectionElement.id = sectionData.id;

    var html = '';
    switch (sectionData.type) {
        case 'text':
            html = '\
                <div class="container">\
                    <h2 class="section-title">' + (sectionData.title || '') + '</h2>\
                    <div class="section-content">\
                        <p>' + (sectionData.content || '') + '</p>\
                    </div>\
                </div>\
            ';
            break;
        case 'image':
            html = '\
                <div class="container">\
                    <div class="section-content" style="display: flex; gap: 30px; align-items: center; flex-wrap: wrap;">\
                        <div class="text-content" style="flex: 1; min-width: 300px;">\
                            <h2 class="section-title">' + (sectionData.title || '') + '</h2>\
                            <p>' + (sectionData.content || '') + '</p>\
                        </div>\
                        <div class="image-content" style="flex: 1; min-width: 300px; text-align: center;">\
                            ' + (sectionData.image ? '<img src="' + sectionData.image + '" alt="' + (sectionData.title || '') + '" style="max-width: 100%; border-radius: 10px;">' : '') + '\
                        </div>\
                    </div>\
                </div>\
            ';
            break;
        case 'features':
            var featuresHtml = (sectionData.features || []).map(function(feature) {
                return '\
                    <div class="feature-item" style="text-align: center; padding: 30px 20px; background: white; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); transition: transform 0.3s ease;">\
                        <div class="feature-icon" style="font-size: 3em; margin-bottom: 20px; color: #2c5aa0;">\
                            <i class="' + (feature.icon || 'fas fa-star') + '"></i>\
                        </div>\
                        <h3 style="margin-bottom: 15px; color: #333;">' + (feature.title || '') + '</h3>\
                        <p style="color: #666; line-height: 1.6;">' + (feature.description || '') + '</p>\
                    </div>\
                ';
            }).join('');
            
            html = '\
                <div class="container">\
                    <h2 class="section-title">' + (sectionData.title || '') + '</h2>\
                    <div class="features-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 30px; margin-top: 40px;">\
                        ' + featuresHtml + '\
                    </div>\
                </div>\
            ';
            break;
        case 'cta':
            html = '\
                <div class="container">\
                    <div class="cta-section" style="text-align: center; padding: 60px 40px; background: linear-gradient(135deg, #2c5aa0, #4a7bc8); color: white; border-radius: 15px; margin: 40px 0;">\
                        <h2 style="margin-bottom: 20px; font-size: 2.5em;">' + (sectionData.title || '') + '</h2>\
                        <p style="margin-bottom: 30px; font-size: 1.2em; opacity: 0.9;">' + (sectionData.description || '') + '</p>\
                        ' + (sectionData.buttonText ? '\
                            <a href="' + (sectionData.buttonUrl || '#') + '" class="cta-button" style="background: white; color: #2c5aa0; padding: 15px 40px; border-radius: 30px; text-decoration: none; font-weight: 600; display: inline-block; font-size: 1.1em; transition: all 0.3s ease;">\
                                ' + sectionData.buttonText + '\
                            </a>\
                        ' : '') + '\
                    </div>\
                </div>\
            ';
            break;
    }

    sectionElement.innerHTML = html;
    sectionElement.style.padding = '80px 0';
    sectionElement.style.background = sectionData.type === 'cta' ? 'transparent' : '#f8f9fa';
    
    if (sectionData.type === 'cta') {
        sectionElement.style.padding = '40px 0';
    }

    container.appendChild(sectionElement);
};

// Initialize enhanced content updater
var contentUpdater = new ContentUpdater();



=== FILE: ./super-admin.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WorldTravel - –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</title>
    <style>
        :root {
            --primary: #2c5aa0;
            --primary-dark: #1e3d72;
            --secondary: #4a7bc8;
            --success: #28a745;
            --warning: #ffc107;
            --danger: #dc3545;
            --light: #f8f9fa;
            --dark: #343a40;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fb;
            color: #333;
            line-height: 1.6;
        }

        .admin-layout {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
        }

        .sidebar-header {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .sidebar-header h1 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-item {
            padding: 1rem 1.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .nav-item:hover, .nav-item.active {
            background: rgba(255,255,255,0.1);
            border-left-color: white;
        }

        .nav-item i {
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .top-header {
            background: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .content-area {
            padding: 2rem;
            flex: 1;
            overflow-y: auto;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            text-align: center;
            transition: transform 0.3s ease;
            border-left: 4px solid var(--primary);
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card h3 {
            font-size: 2.5rem;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }

        /* Content Sections */
        .content-section {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--light);
        }

        /* Buttons */
        .btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        .btn-success {
            background: var(--success);
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-warning {
            background: var(--warning);
            color: var(--dark);
        }

        .btn-warning:hover {
            background: #e0a800;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-danger:hover {
            background: #c82333;
        }

        /* Tables */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .data-table th,
        .data-table td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e1e5ee;
        }

        .data-table th {
            background: var(--light);
            font-weight: 600;
            color: var(--dark);
        }

        .data-table tr:hover {
            background: #f8f9fa;
        }

        /* Forms */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 2px solid #e1e5ee;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
        }

        /* Tabs */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Cards */
        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 1.5rem;
        }

        .card-body {
            padding: 1.5rem;
        }

        .card-actions {
            padding: 1rem 1.5rem;
            background: var(--light);
            display: flex;
            gap: 0.5rem;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--light);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--dark);
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 1rem;
            z-index: 10000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            border-left: 4px solid var(--success);
            background: #d4edda;
            color: #155724;
        }

        .notification.error {
            border-left: 4px solid var(--danger);
            background: #f8d7da;
            color: #721c24;
        }

        .notification-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
        }

        /* Tour Card */
        .tour-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--success);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .tour-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 1rem;
        }

        .tour-country {
            background: var(--primary);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body>
    <div class="admin-layout">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h1><i class="fas fa-globe-americas"></i> WorldTravel</h1>
                <p>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</p>
            </div>
            <nav class="sidebar-nav">
                <div class="nav-item active" data-tab="dashboard">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>–î–∞—à–±–æ—Ä–¥</span>
                </div>
                <div class="nav-item" data-tab="countries">
                    <i class="fas fa-globe"></i>
                    <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏</span>
                </div>
                <div class="nav-item" data-tab="tours">
                    <i class="fas fa-map-marked-alt"></i>
                    <span>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞–º–∏</span>
                </div>
                <div class="nav-item" data-tab="content">
                    <i class="fas fa-edit"></i>
                    <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</span>
                </div>
                <div class="nav-item" data-tab="settings">
                    <i class="fas fa-cog"></i>
                    <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</span>
                </div>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <header class="top-header">
    <div style="display: flex; align-items: center; gap: 1rem;">
        <h2 id="page-title">–î–∞—à–±–æ—Ä–¥</h2>
        <button class="btn" onclick="window.open('/', '_blank')" 
                style="background: #17a2b8; font-size: 0.8rem; padding: 0.5rem 1rem;">
            <i class="fas fa-home"></i> –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </button>
    </div>
    <div class="user-info">
        <span>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</span>
        <button class="btn btn-danger" onclick="admin.logout()">
            <i class="fas fa-sign-out-alt"></i> –í—ã–π—Ç–∏
        </button>
    </div>
</header>
            <div class="content-area">
                <!-- Dashboard Tab -->
                <div id="dashboard" class="tab-content active">
                    <!-- Welcome Message -->
                    <div class="content-section" style="background: linear-gradient(135deg, #d4edda, #c3e6cb); border-left: 4px solid var(--success);">
                        <h3><i class="fas fa-check-circle"></i> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</h3>
                        <p>–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.</p>
                    </div>

                    <!-- Statistics -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <i class="fas fa-globe" style="font-size: 2rem; color: var(--primary); margin-bottom: 1rem;"></i>
                            <h3 id="stats-countries">0</h3>
                            <p>–°—Ç—Ä–∞–Ω</p>
                        </div>
                        <div class="stat-card">
                            <i class="fas fa-map-marked-alt" style="font-size: 2rem; color: var(--success); margin-bottom: 1rem;"></i>
                            <h3 id="stats-tours">0</h3>
                            <p>–¢—É—Ä–æ–≤</p>
                        </div>
                        <div class="stat-card">
                            <i class="fas fa-calendar-check" style="font-size: 2rem; color: var(--warning); margin-bottom: 1rem;"></i>
                            <h3>1,247</h3>
                            <p>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</p>
                        </div>
                        <div class="stat-card">
                            <i class="fas fa-users" style="font-size: 2rem; color: var(--danger); margin-bottom: 1rem;"></i>
                            <h3>543</h3>
                            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                        </div>
                    </div>

                    <!-- Quick Actions -->
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
                        </div>
                        <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                            <button class="btn btn-success" onclick="admin.openCountryModal()">
                                <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É
                            </button>
                            <button class="btn" onclick="admin.openTourModal()">
                                <i class="fas fa-plus-circle"></i> –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä
                            </button>
                            <button class="btn" onclick="admin.exportData()">
                                <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                            </button>
                            <button class="btn btn-warning" onclick="admin.addSampleData()">
                                <i class="fas fa-magic"></i> –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                            </button>
                        </div>
                    </div>

                    <!-- Recent Activity -->
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
                        </div>
                        <div id="recent-activity">
                            <!-- Activity will be loaded here -->
                        </div>
                    </div>
                </div>

                <!-- Countries Tab -->
                <div id="countries" class="tab-content">
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏</h3>
                            <button class="btn btn-success" onclick="admin.openCountryModal()">
                                <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É
                            </button>
                        </div>
                        
                        <div class="card-grid" id="countries-list">
                            <!-- Countries will be loaded here -->
                        </div>
                    </div>
                </div>

                <!-- Tours Tab -->
                <div id="tours" class="tab-content">
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–∞–º–∏</h3>
                            <button class="btn btn-success" onclick="admin.openTourModal()">
                                <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä
                            </button>
                        </div>
                        
                        <div id="tours-list">
                            <!-- Tours will be loaded here -->
                        </div>
                    </div>
                </div>

                <!-- Content Tab -->
                <div id="content" class="tab-content">
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                        </div>
                        
                        <div class="form-group">
                            <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</label>
                            <input type="text" id="hero-title" class="form-control" value="–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä —Å WorldTravel">
                        </div>
                        
                        <div class="form-group">
                            <label>–¢–µ–∫—Å—Ç –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º</label>
                            <textarea id="hero-text" class="form-control" rows="3">–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –û—Ç —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª—è–∂–µ–π –¥–æ –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω - –≤–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å.</textarea>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω</label>
                                <input type="text" id="contact-phone" class="form-control" value="+7 (999) 123-45-67">
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                <input type="email" id="contact-email" class="form-control" value="info@worldtravel.com">
                            </div>
                        </div>

                        <div class="form-group">
                            <label>–ê–¥—Ä–µ—Å</label>
                            <input type="text" id="contact-address" class="form-control" value="–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15">
                        </div>
                        
                        <button class="btn btn-success" onclick="admin.saveContent()">
                            <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </button>
                    </div>
                </div>

                <!-- Settings Tab -->
                <div id="settings" class="tab-content">
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</h3>
                        </div>

                        <div class="form-group">
                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label>
                            <input type="text" id="company-name" class="form-control" value="WorldTravel">
                        </div>

                        <div class="form-group">
                            <label>–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</label>
                            <select id="default-currency" class="form-control">
                                <option value="$">–î–æ–ª–ª–∞—Ä ($)</option>
                                <option value="‚Ç¨">–ï–≤—Ä–æ (‚Ç¨)</option>
                                <option value="‚ÇΩ">–†—É–±–ª—å (‚ÇΩ)</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</label>
                            <select id="interface-language" class="form-control">
                                <option value="ru">–†—É—Å—Å–∫–∏–π</option>
                                <option value="en">English</option>
                            </select>
                        </div>

                        <button class="btn btn-success" onclick="admin.saveSettings()">
                            <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        </button>
                    </div>

                    <!-- Data Management -->
                    <div class="content-section">
                        <div class="section-header">
                            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
                        </div>

                        <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                            <button class="btn" onclick="admin.exportData()">
                                <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                            </button>
                            <button class="btn btn-warning" onclick="admin.importData()">
                                <i class="fas fa-upload"></i> –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                            </button>
                            <button class="btn btn-danger" onclick="admin.clearData()">
                                <i class="fas fa-trash"></i> –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Country Modal -->
    <div class="modal" id="countryModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="countryModalTitle">–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É</h3>
                <button class="modal-close" onclick="admin.closeModal('countryModal')">&times;</button>
            </div>
            <form id="countryForm">
                <div class="form-group">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã *</label>
                    <input type="text" id="country-name" class="form-control" required>
                </div>
                <div class="form-group">
                    <label>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *</label>
                    <textarea id="country-short-description" class="form-control" rows="2" required></textarea>
                </div>
                <div class="form-group">
                    <label>–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea id="country-description" class="form-control" rows="4"></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–¶–µ–Ω–∞ –æ—Ç *</label>
                        <input type="text" id="country-price" class="form-control" required>
                    </div>
                    <div class="form-group">
                        <label>–°—Ç–æ–ª–∏—Ü–∞</label>
                        <input type="text" id="country-capital" class="form-control">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–Ø–∑—ã–∫</label>
                        <input type="text" id="country-language" class="form-control">
                    </div>
                    <div class="form-group">
                        <label>–í–∞–ª—é—Ç–∞</label>
                        <input type="text" id="country-currency" class="form-control">
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn" onclick="admin.closeModal('countryModal')">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="btn btn-success">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Tour Modal -->
    <div class="modal" id="tourModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="tourModalTitle">–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä</h3>
                <button class="modal-close" onclick="admin.closeModal('tourModal')">&times;</button>
            </div>
            <form id="tourForm">
                <div class="form-group">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞ *</label>
                    <input type="text" id="tour-name" class="form-control" required>
                </div>
                <div class="form-group">
                    <label>–°—Ç—Ä–∞–Ω–∞ *</label>
                    <select id="tour-country" class="form-control" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</option>
                    </select>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å *</label>
                        <input type="text" id="tour-duration" class="form-control" placeholder="7 –¥–Ω–µ–π" required>
                    </div>
                    <div class="form-group">
                        <label>–¶–µ–Ω–∞ *</label>
                        <input type="text" id="tour-price" class="form-control" placeholder="$500" required>
                    </div>
                </div>
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞</label>
                    <textarea id="tour-description" class="form-control" rows="4"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn" onclick="admin.closeModal('tourModal')">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="btn btn-success">–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // –ü–æ–ª–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        class SuperAdmin {
            constructor() {
                this.countries = [];
                this.tours = [];
                this.settings = {};
                this.currentEditingId = null;
                
                this.init();
            }

            init() {
                this.loadData();
                this.setupEventListeners();
                this.renderDashboard();
                console.log('üöÄ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
            }

            loadData() {
                try {
                    const data = sessionStorage.getItem('worldtravel_data') || 
                                localStorage.getItem('worldtravel_data');
                    if (data) {
                        const parsed = JSON.parse(data);
                        this.countries = parsed.countries || [];
                        this.tours = parsed.tours || [];
                        this.settings = parsed.settings || {};
                        console.log('üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:', this.countries.length, '—Å—Ç—Ä–∞–Ω,', this.tours.length, '—Ç—É—Ä–æ–≤');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    this.countries = [];
                    this.tours = [];
                }
            }

            saveData() {
                const data = {
                    countries: this.countries,
                    tours: this.tours,
                    settings: this.settings,
                    content: this.getContentData(),
                    lastUpdate: new Date().toISOString()
                };

                sessionStorage.setItem('worldtravel_data', JSON.stringify(data));
                localStorage.setItem('worldtravel_data', JSON.stringify(data));

                this.updateStats();
                this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
                console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            }

            setupEventListeners() {
                // –ù–∞–≤–∏–≥–∞—Ü–∏—è
                document.querySelectorAll('.nav-item').forEach(item => {
                    item.addEventListener('click', (e) => {
                        const tab = e.currentTarget.getAttribute('data-tab');
                        this.showTab(tab);
                    });
                });

                // –§–æ—Ä–º—ã
                document.getElementById('countryForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveCountry();
                });

                document.getElementById('tourForm').addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.saveTour();
                });
            }

            showTab(tabName) {
                // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });

                // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
                document.querySelectorAll('.nav-item').forEach(item => {
                    item.classList.remove('active');
                });

                // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                const tab = document.getElementById(tabName);
                if (tab) {
                    tab.classList.add('active');
                }

                // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é
                const navItem = document.querySelector(`[data-tab="${tabName}"]`);
                if (navItem) {
                    navItem.classList.add('active');
                }

                // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                document.getElementById('page-title').textContent = 
                    navItem.querySelector('span').textContent;

                // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
                this.loadTabData(tabName);
            }

            loadTabData(tabName) {
                switch (tabName) {
                    case 'dashboard':
                        this.renderDashboard();
                        break;
                    case 'countries':
                        this.renderCountries();
                        break;
                    case 'tours':
                        this.renderTours();
                        break;
                    case 'content':
                        this.loadContent();
                        break;
                    case 'settings':
                        this.loadSettings();
                        break;
                }
            }

            renderDashboard() {
                this.updateStats();
                this.renderRecentActivity();
            }

            updateStats() {
                document.getElementById('stats-countries').textContent = this.countries.length;
                document.getElementById('stats-tours').textContent = this.tours.length;
            }

            renderRecentActivity() {
                const container = document.getElementById('recent-activity');
                const activities = [
                    { action: '–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞', item: '–ò—Ç–∞–ª–∏—è', time: '2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥' },
                    { action: '–°–æ–∑–¥–∞–Ω —Ç—É—Ä', item: '–†–∏–º—Å–∫–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', time: '5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥' },
                    { action: '–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç', item: '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞', time: '10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥' }
                ];

                container.innerHTML = activities.map(activity => `
                    <div class="tour-card">
                        <div class="tour-header">
                            <div>
                                <strong>${activity.action}</strong>
                                <div style="color: #666; margin-top: 0.25rem;">${activity.item}</div>
                            </div>
                            <span style="color: #999; font-size: 0.9rem;">${activity.time}</span>
                        </div>
                    </div>
                `).join('');
            }

            renderCountries() {
                const container = document.getElementById('countries-list');
                
                if (this.countries.length === 0) {
                    container.innerHTML = `
                        <div style="text-align: center; padding: 3rem; color: #666; grid-column: 1 / -1;">
                            <i class="fas fa-globe-americas" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                            <h3>–°—Ç—Ä–∞–Ω –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</p>
                        </div>
                    `;
                    return;
                }

                container.innerHTML = this.countries.map(country => `
                    <div class="card">
                        <div class="card-header">
                            <h4 style="margin: 0; color: white;">${country.name}</h4>
                        </div>
                        <div class="card-body">
                            <p style="color: #666; margin-bottom: 1rem;">${country.shortDescription || country.description || ''}</p>
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <strong style="color: var(--primary);">${country.price}</strong>
                                <span style="font-size: 0.9rem; color: #999;">${country.tours ? country.tours.length : 0} —Ç—É—Ä–æ–≤</span>
                            </div>
                        </div>
                        <div class="card-actions">
                            <button class="btn" onclick="admin.editCountry('${country.id}')">
                                <i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button class="btn btn-danger" onclick="admin.deleteCountry('${country.id}')">
                                <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            renderTours() {
                const container = document.getElementById('tours-list');
                
                if (this.tours.length === 0) {
                    container.innerHTML = `
                        <div style="text-align: center; padding: 3rem; color: #666;">
                            <i class="fas fa-map-marked-alt" style="font-size: 4rem; margin-bottom: 1rem;"></i>
                            <h3>–¢—É—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç—É—Ä –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –≤—ã—à–µ</p>
                        </div>
                    `;
                    return;
                }

                container.innerHTML = this.tours.map(tour => `
                    <div class="tour-card">
                        <div class="tour-header">
                            <div>
                                <h4 style="margin: 0 0 0.5rem 0;">${tour.name}</h4>
                                <span class="tour-country">${tour.country}</span>
                            </div>
                            <div style="text-align: right;">
                                <div style="font-weight: bold; color: var(--primary);">${tour.price}</div>
                                <div style="color: #666; font-size: 0.9rem;">${tour.duration}</div>
                            </div>
                        </div>
                        <p style="color: #666; margin: 0;">${tour.description || ''}</p>
                        <div style="margin-top: 1rem; display: flex; gap: 0.5rem;">
                            <button class="btn" onclick="admin.editTour('${tour.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-danger" onclick="admin.deleteTour('${tour.id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            openCountryModal(countryId = null) {
                this.currentEditingId = countryId;
                const modal = document.getElementById('countryModal');
                const title = document.getElementById('countryModalTitle');

                if (countryId) {
                    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É';
                    this.fillCountryForm(countryId);
                } else {
                    title.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É';
                    this.resetCountryForm();
                }

                this.openModal('countryModal');
            }

            fillCountryForm(countryId) {
                const country = this.countries.find(c => c.id === countryId);
                if (country) {
                    document.getElementById('country-name').value = country.name;
                    document.getElementById('country-short-description').value = country.shortDescription || '';
                    document.getElementById('country-description').value = country.description || '';
                    document.getElementById('country-price').value = country.price || '';
                    document.getElementById('country-capital').value = country.capital || '';
                    document.getElementById('country-language').value = country.language || '';
                    document.getElementById('country-currency').value = country.currency || '';
                }
            }

            resetCountryForm() {
                document.getElementById('countryForm').reset();
            }

            saveCountry() {
                const name = document.getElementById('country-name').value;
                const shortDescription = document.getElementById('country-short-description').value;
                const description = document.getElementById('country-description').value;
                const price = document.getElementById('country-price').value;
                const capital = document.getElementById('country-capital').value;
                const language = document.getElementById('country-language').value;
                const currency = document.getElementById('country-currency').value;

                if (!name || !shortDescription || !price) {
                    this.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                    return;
                }

                const countryData = {
                    id: this.currentEditingId || this.generateId(name),
                    name: name,
                    shortDescription: shortDescription,
                    description: description,
                    price: price,
                    capital: capital,
                    language: language,
                    currency: currency,
                    images: [],
                    tours: []
                };

                if (this.currentEditingId) {
                    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    const index = this.countries.findIndex(c => c.id === this.currentEditingId);
                    if (index !== -1) {
                        this.countries[index] = { ...this.countries[index], ...countryData };
                    }
                    this.showNotification('‚úÖ –°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
                } else {
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                    this.countries.push(countryData);
                    this.showNotification('‚úÖ –°—Ç—Ä–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
                }

                this.saveData();
                this.closeModal('countryModal');
                this.renderCountries();
            }

                        openTourModal(tourId = null) {
                this.currentEditingId = tourId;
                const modal = document.getElementById('tourModal');
                const title = document.getElementById('tourModalTitle');

                // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
                this.populateCountrySelect();

                if (tourId) {
                    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä';
                    this.fillTourForm(tourId);
                } else {
                    title.textContent = '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä';
                    this.resetTourForm();
                }

                this.openModal('tourModal');
            }

            populateCountrySelect() {
                const select = document.getElementById('tour-country');
                select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É</option>';
                
                this.countries.forEach(country => {
                    const option = document.createElement('option');
                    option.value = country.name;
                    option.textContent = country.name;
                    select.appendChild(option);
                });
            }

            fillTourForm(tourId) {
                const tour = this.tours.find(t => t.id === tourId);
                if (tour) {
                    document.getElementById('tour-name').value = tour.name;
                    document.getElementById('tour-country').value = tour.country;
                    document.getElementById('tour-duration').value = tour.duration;
                    document.getElementById('tour-price').value = tour.price;
                    document.getElementById('tour-description').value = tour.description || '';
                }
            }

            resetTourForm() {
                document.getElementById('tourForm').reset();
            }

            saveTour() {
                const name = document.getElementById('tour-name').value;
                const country = document.getElementById('tour-country').value;
                const duration = document.getElementById('tour-duration').value;
                const price = document.getElementById('tour-price').value;
                const description = document.getElementById('tour-description').value;

                if (!name || !country || !duration || !price) {
                    this.showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
                    return;
                }

                const tourData = {
                    id: this.currentEditingId || this.generateId(name),
                    name: name,
                    country: country,
                    duration: duration,
                    price: price,
                    description: description,
                    createdAt: new Date().toISOString()
                };

                if (this.currentEditingId) {
                    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    const index = this.tours.findIndex(t => t.id === this.currentEditingId);
                    if (index !== -1) {
                        this.tours[index] = { ...this.tours[index], ...tourData };
                    }
                    this.showNotification('‚úÖ –¢—É—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
                } else {
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
                    this.tours.push(tourData);
                    this.showNotification('‚úÖ –¢—É—Ä —Å–æ–∑–¥–∞–Ω!', 'success');
                }

                this.saveData();
                this.closeModal('tourModal');
                this.renderTours();
            }

            editCountry(countryId) {
                this.openCountryModal(countryId);
            }

            editTour(tourId) {
                this.openTourModal(tourId);
            }

            deleteCountry(countryId) {
                if (confirm('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
                    // –£–¥–∞–ª—è–µ–º —Ç—É—Ä—ã —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
                    this.tours = this.tours.filter(t => {
                        const country = this.countries.find(c => c.id === countryId);
                        return !country || t.country !== country.name;
                    });

                    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É
                    this.countries = this.countries.filter(c => c.id !== countryId);
                    
                    this.saveData();
                    this.renderCountries();
                    this.renderTours();
                    this.showNotification('‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã!', 'success');
                }
            }

            deleteTour(tourId) {
                if (confirm('–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä?')) {
                    this.tours = this.tours.filter(t => t.id !== tourId);
                    this.saveData();
                    this.renderTours();
                    this.showNotification('‚úÖ –¢—É—Ä —É–¥–∞–ª–µ–Ω!', 'success');
                }
            }

            loadContent() {
                const data = this.getContentData();
                document.getElementById('hero-title').value = data.heroTitle;
                document.getElementById('hero-text').value = data.heroText;
                document.getElementById('contact-phone').value = data.contactPhone;
                document.getElementById('contact-email').value = data.contactEmail;
                document.getElementById('contact-address').value = data.contactAddress;
            }

            getContentData() {
                const data = sessionStorage.getItem('worldtravel_data') || 
                            localStorage.getItem('worldtravel_data');
                if (data) {
                    const parsed = JSON.parse(data);
                    return parsed.content || this.getDefaultContent();
                }
                return this.getDefaultContent();
            }

            getDefaultContent() {
                return {
                    heroTitle: '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä —Å WorldTravel',
                    heroText: '–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –û—Ç —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª—è–∂–µ–π –¥–æ –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω - –≤–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å.',
                    contactPhone: '+7 (999) 123-45-67',
                    contactEmail: 'info@worldtravel.com',
                    contactAddress: '–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15'
                };
            }

            saveContent() {
                const content = {
                    heroTitle: document.getElementById('hero-title').value,
                    heroText: document.getElementById('hero-text').value,
                    contactPhone: document.getElementById('contact-phone').value,
                    contactEmail: document.getElementById('contact-email').value,
                    contactAddress: document.getElementById('contact-address').value
                };

                this.updateContentData(content);
                this.showNotification('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
            }

            updateContentData(content) {
                const data = sessionStorage.getItem('worldtravel_data') || 
                            localStorage.getItem('worldtravel_data');
                
                let parsed = { countries: [], tours: [], settings: {}, content: {} };
                if (data) {
                    parsed = JSON.parse(data);
                }

                parsed.content = content;
                parsed.lastUpdate = new Date().toISOString();

                sessionStorage.setItem('worldtravel_data', JSON.stringify(parsed));
                localStorage.setItem('worldtravel_data', JSON.stringify(parsed));
            }

            loadSettings() {
                document.getElementById('company-name').value = this.settings.companyName || 'WorldTravel';
                document.getElementById('default-currency').value = this.settings.defaultCurrency || '$';
                document.getElementById('interface-language').value = this.settings.interfaceLanguage || 'ru';
            }

            saveSettings() {
                this.settings = {
                    companyName: document.getElementById('company-name').value,
                    defaultCurrency: document.getElementById('default-currency').value,
                    interfaceLanguage: document.getElementById('interface-language').value
                };

                this.saveData();
                this.showNotification('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
            }

            exportData() {
                const data = {
                    countries: this.countries,
                    tours: this.tours,
                    settings: this.settings,
                    content: this.getContentData(),
                    exportDate: new Date().toISOString(),
                    version: '1.0'
                };

                const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                const a = document.createElement('a');
                a.href = url;
                a.download = `worldtravel-backup-${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
            }

            importData() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.json';
                
                input.onchange = (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (event) => {
                            try {
                                const data = JSON.parse(event.target.result);
                                
                                if (confirm('–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏?')) {
                                    this.countries = data.countries || [];
                                    this.tours = data.tours || [];
                                    this.settings = data.settings || {};
                                    
                                    if (data.content) {
                                        this.updateContentData(data.content);
                                    }
                                    
                                    this.saveData();
                                    this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
                                    this.renderDashboard();
                                    this.renderCountries();
                                    this.renderTours();
                                }
                            } catch (error) {
                                this.showNotification('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞', 'error');
                            }
                        };
                        reader.readAsText(file);
                    }
                };
                
                input.click();
            }

            clearData() {
                if (confirm('–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ (—Å—Ç—Ä–∞–Ω—ã, —Ç—É—Ä—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏). –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                    this.countries = [];
                    this.tours = [];
                    this.settings = {};
                    
                    sessionStorage.removeItem('worldtravel_data');
                    localStorage.removeItem('worldtravel_data');
                    
                    this.showNotification('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!', 'success');
                    this.renderDashboard();
                    this.renderCountries();
                    this.renderTours();
                }
            }

            addSampleData() {
                const sampleCountries = [
                    {
                        id: 'france',
                        name: '–§—Ä–∞–Ω—Ü–∏—è',
                        shortDescription: '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –§—Ä–∞–Ω—Ü–∏—è —Å –µ—ë –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π –∫—É—Ö–Ω–µ–π.',
                        description: '–§—Ä–∞–Ω—Ü–∏—è - —Å—Ç—Ä–∞–Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –º–æ–¥—ã –∏ –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏. –ü–æ—Å–µ—Ç–∏—Ç–µ –≠–π—Ñ–µ–ª–µ–≤—É –±–∞—à–Ω—é, –õ—É–≤—Ä –∏ –ø—Ä–æ–≤–∞–Ω—Å–∞–ª—å—Å–∫–∏–µ –ø–æ–ª—è –ª–∞–≤–∞–Ω–¥—ã.',
                        price: '–æ—Ç ‚Ç¨800',
                        capital: '–ü–∞—Ä–∏–∂',
                        language: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
                        currency: '–ï–≤—Ä–æ (‚Ç¨)',
                        images: [],
                        tours: []
                    },
                    {
                        id: 'italy',
                        name: '–ò—Ç–∞–ª–∏—è',
                        shortDescription: '–°—Ç—Ä–∞–Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–∞, –¥—Ä–µ–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–∞–º–æ–π –≤–∫—É—Å–Ω–æ–π –∫—É—Ö–Ω–∏ –≤ –º–∏—Ä–µ.',
                        description: '–ò—Ç–∞–ª–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º –±–æ–≥–∞—Ç–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ, –æ—Ç –î—Ä–µ–≤–Ω–µ–≥–æ –†–∏–º–∞ –¥–æ —ç–ø–æ—Ö–∏ –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è.',
                        price: '–æ—Ç ‚Ç¨750',
                        capital: '–†–∏–º',
                        language: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
                        currency: '–ï–≤—Ä–æ (‚Ç¨)',
                        images: [],
                        tours: []
                    }
                ];

                const sampleTours = [
                    {
                        id: 'paris-weekend',
                        name: '–ü–∞—Ä–∏–∂—Å–∫–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ',
                        country: '–§—Ä–∞–Ω—Ü–∏—è',
                        duration: '3 –¥–Ω—è',
                        price: '‚Ç¨450',
                        description: '–≠–∫—Å–ø—Ä–µ—Å—Å-—Ç—É—Ä –ø–æ —Å–∞–º—ã–º –∑–Ω–∞–∫–æ–≤—ã–º –º–µ—Å—Ç–∞–º –ü–∞—Ä–∏–∂–∞',
                        createdAt: new Date().toISOString()
                    },
                    {
                        id: 'rome-classic',
                        name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –†–∏–º',
                        country: '–ò—Ç–∞–ª–∏—è',
                        duration: '5 –¥–Ω–µ–π',
                        price: '‚Ç¨600',
                        description: '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ –í–µ—á–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞',
                        createdAt: new Date().toISOString()
                    }
                ];

                this.countries = [...this.countries, ...sampleCountries];
                this.tours = [...this.tours, ...sampleTours];
                this.saveData();
                
                this.showNotification('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', 'success');
                this.renderDashboard();
                this.renderCountries();
                this.renderTours();
            }

            openModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.add('active');
                }
            }

            closeModal(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.remove('active');
                }
                this.currentEditingId = null;
            }

            showNotification(message, type = 'success') {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle"></i>
                    <span>${message}</span>
                    <button class="notification-close" onclick="this.parentElement.remove()">&times;</button>
                `;

                document.body.appendChild(notification);

                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                setTimeout(() => notification.classList.add('show'), 100);

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
                setTimeout(() => {
                    if (notification.parentElement) {
                        notification.remove();
                    }
                }, 5000);
            }

            generateId(name) {
                return name.toLowerCase()
                    .replace(/[^a-z0-9–∞-—è—ë]/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-|-$/g, '') + '-' + Date.now();
            }

            logout() {
                if (confirm('–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏?')) {
                    localStorage.removeItem('adminSession');
                    sessionStorage.removeItem('adminSession');
                    window.location.href = 'admin-login.html';
                }
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        let admin;
        document.addEventListener('DOMContentLoaded', () => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
            const session = localStorage.getItem('adminSession') || sessionStorage.getItem('adminSession');
            if (!session) {
                window.location.href = 'admin-login.html';
                return;
            }

            admin = new SuperAdmin();
            window.admin = admin;

            // –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
            document.addEventListener('contextmenu', (e) => e.preventDefault());
            document.addEventListener('copy', (e) => e.preventDefault());
            document.addEventListener('cut', (e) => e.preventDefault());
        });
    </script>
</body>
</html>


=== FILE: ./image-manager-dataurl.js ===
// Image Manager with Data URL support - —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É Blob URL
function ImageManagerDataURL() {
    this.maxFileSize = 2 * 1024 * 1024; // 2MB –¥–ª—è Data URL
    this.supportedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    this.init();
}

ImageManagerDataURL.prototype.init = function() {
    console.log('üñºÔ∏è Image Manager with Data URL initialized');
    this.integrateWithEditor();
};

ImageManagerDataURL.prototype.integrateWithEditor = function() {
    const checkEditor = () => {
        if (window.editor) {
            this.patchEditorMethods();
            console.log('‚úÖ Image Manager integrated with editor');
        } else {
            setTimeout(checkEditor, 100);
        }
    };
    checkEditor();
};

ImageManagerDataURL.prototype.patchEditorMethods = function() {
    const self = this;
    
    // –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –≤–µ—Ä—Å–∏—é —Å Data URL
    if (window.editor.uploadImage) {
        window.editor.uploadImage = function(fieldId) {
            self.uploadImageAsDataURL(fieldId);
        };
    }
    
    // –£–ª—É—á—à–∞–µ–º –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ URL
    if (window.editor.setImageUrl) {
        const originalSetImageUrl = window.editor.setImageUrl;
        window.editor.setImageUrl = function(fieldId) {
            self.setImageUrlEnhanced(fieldId, originalSetImageUrl);
        };
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Blob URL –≤ Data URL
    this.convertExistingBlobUrls();
};

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Blob URL –≤ Data URL
ImageManagerDataURL.prototype.convertExistingBlobUrls = function() {
    if (!window.editor || !window.editor.currentData) return;
    
    let converted = false;
    const data = window.editor.currentData;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Blob URL
    const convertBlobUrlsInObject = (obj) => {
        if (!obj || typeof obj !== 'object') return;
        
        Object.keys(obj).forEach(key => {
            const value = obj[key];
            if (typeof value === 'string' && value.startsWith('blob:')) {
                console.log('üîÑ Converting blob URL to placeholder:', value);
                obj[key] = 'images/travel-placeholder.svg';
                converted = true;
            } else if (typeof value === 'object') {
                convertBlobUrlsInObject(value);
            }
        });
    };
    
    convertBlobUrlsInObject(data);
    
    if (converted) {
        console.log('‚úÖ Converted blob URLs in data');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (window.editor.saveData) {
            window.editor.saveData();
        }
    }
};

ImageManagerDataURL.prototype.uploadImageAsDataURL = function(fieldId) {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = this.supportedFormats.join(',');
    
    input.onchange = (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if (!this.validateFile(file)) {
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ Data URL
        const reader = new FileReader();
        
        reader.onload = (e) => {
            const dataUrl = e.target.result;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
            if (window.editor && window.editor.updateImageField) {
                window.editor.updateImageField(fieldId, dataUrl);
            }
            
            this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–∫ Data URL', 'success');
        };
        
        reader.onerror = () => {
            this.showNotification('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
        };
        
        reader.readAsDataURL(file);
    };
    
    input.click();
};

ImageManagerDataURL.prototype.validateFile = function(file) {
    if (!this.supportedFormats.includes(file.type)) {
        this.showNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPG, PNG, GIF –∏–ª–∏ WebP.', 'error');
        return false;
    }
    
    if (file.size > this.maxFileSize) {
        this.showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(this.maxFileSize)}.`, 'error');
        return false;
    }
    
    return true;
};

ImageManagerDataURL.prototype.setImageUrlEnhanced = function(fieldId, originalMethod) {
    const currentValue = this.getCurrentImageValue(fieldId);
    
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - Blob URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if (currentValue && currentValue.startsWith('blob:')) {
        if (!confirm('–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π Blob URL. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            return;
        }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –Ω–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentValue || '');
    
    if (url === null) return;
    
    if (url === '') {
        if (window.editor && window.editor.removeImage) {
            window.editor.removeImage(fieldId);
        }
        return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if (this.validateImageUrl(url)) {
        if (window.editor && window.editor.updateImageField) {
            window.editor.updateImageField(fieldId, url);
        }
        this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    } else {
        this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
    }
};

ImageManagerDataURL.prototype.validateImageUrl = function(url) {
    try {
        // –î–ª—è data URL –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω—ã
        if (url.startsWith('data:image')) return true;
        
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö URL –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if (url.startsWith('http://') || url.startsWith('https://')) {
            new URL(url);
            return true;
        }
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if (url.startsWith('/') || url.startsWith('images/') || url.startsWith('./')) {
            return true;
        }
        
        return false;
    } catch {
        return false;
    }
};

ImageManagerDataURL.prototype.getCurrentImageValue = function(fieldId) {
    const field = document.querySelector(`[data-field="${fieldId}"]`);
    return field ? field.value : '';
};

ImageManagerDataURL.prototype.formatFileSize = function(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

ImageManagerDataURL.prototype.showNotification = function(message, type) {
    if (window.editor && window.editor.showNotification) {
        window.editor.showNotification(message, type);
    } else {
        console.log(`${type === 'error' ? '‚ùå' : '‚úÖ'} ${message}`);
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ Blob URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
ImageManagerDataURL.prototype.cleanupBlobUrls = function() {
    // –†–µ–≤–æ–∫–∞–µ–º –≤—Å–µ Blob URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.querySelectorAll('img[src^="blob:"]').forEach(img => {
        try {
            URL.revokeObjectURL(img.src);
            img.src = 'images/travel-placeholder.svg';
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–≤–æ–∫–∞
        }
    });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new ImageManagerDataURL();
    });
} else {
    new ImageManagerDataURL();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ImageManagerDataURL = ImageManagerDataURL;



=== FILE: ./update-content.js ===
// Enhanced content updater with support for stats and services
function ContentUpdater() {
    this.appliedChanges = new Set();
    this.init();
}

ContentUpdater.prototype.init = function() {
    console.log('üöÄ Enhanced ContentUpdater initialized');
    
    var self = this;
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() { self.applyAllChanges(); }, 100);
        });
    } else {
        setTimeout(function() { self.applyAllChanges(); }, 100);
    }

    window.addEventListener('dataUpdated', function(e) {
        console.log('üîÑ Data update received:', e.detail);
        setTimeout(function() { self.applyAllChanges(); }, 50);
    });

    setInterval(function() { self.applyAllChanges(); }, 2000);
};

ContentUpdater.prototype.applyAllChanges = function() {
    if (!window.dataManager) {
        console.log('‚è≥ Waiting for DataManager...');
        this.applyLocalChanges();
        return;
    }

    var data = window.dataManager.getData();
    if (!data) {
        console.log('üì≠ No data available');
        this.applyLocalChanges();
        return;
    }

    var changeHash = this.getDataHash(data);
    if (this.appliedChanges.has(changeHash)) {
        return;
    }

    console.log('üîÑ Applying changes from DataManager...');
    
    this.applyContentChanges(data.content);
    this.applyContactChanges(data.contacts);
    this.applySettingsChanges(data.settings);
    this.applyStatsChanges(data.content);
    this.applyServicesChanges(data.content);
    
    this.appliedChanges.add(changeHash);
    console.log('‚úÖ Changes applied successfully');
};

ContentUpdater.prototype.applyLocalChanges = function() {
    var localData = localStorage.getItem('worldtravel_data');
    if (localData) {
        try {
            var data = JSON.parse(localData);
            console.log('üìÅ Applying local changes...');
            this.applyContentChanges(data.content);
            this.applyContactChanges(data.contacts);
            this.applySettingsChanges(data.settings);
            this.applyStatsChanges(data.content);
            this.applyServicesChanges(data.content);
        } catch (error) {
            console.error('‚ùå Error applying local changes:', error);
        }
    }
};

ContentUpdater.prototype.applyStatsChanges = function(content) {
    if (!content?.about?.stats) {
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫
        this.hideStatsSection();
        return;
    }

    var stats = content.about.stats;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    var validStats = stats.filter(stat => stat.value && stat.label);
    
    if (validStats.length === 0) {
        this.hideStatsSection();
        return;
    }
    
    console.log('üìä Applying stats changes:', validStats.length, 'valid items');
    
    var statElements = document.querySelectorAll('.stat');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.showStatsSection();
    
    if (statElements.length >= validStats.length) {
        validStats.forEach(function(stat, index) {
            if (statElements[index]) {
                var valueElement = statElements[index].querySelector('h3');
                var labelElement = statElements[index].querySelector('p');
                
                if (valueElement) {
                    valueElement.textContent = stat.value;
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞
                    if (!valueElement.hasAttribute('data-target')) {
                        valueElement.setAttribute('data-target', stat.value);
                    }
                }
                if (labelElement) {
                    labelElement.textContent = stat.label;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                statElements[index].style.display = 'block';
            }
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (var i = validStats.length; i < statElements.length; i++) {
            statElements[i].style.display = 'none';
        }
    }
};

ContentUpdater.prototype.hideStatsSection = function() {
    var statsContainer = document.querySelector('.stats');
    if (statsContainer) {
        statsContainer.style.display = 'none';
    }
};

ContentUpdater.prototype.showStatsSection = function() {
    var statsContainer = document.querySelector('.stats');
    if (statsContainer) {
        statsContainer.style.display = 'flex';
    }
};

ContentUpdater.prototype.applyServicesChanges = function(content) {
    if (!content?.services?.services) {
        // –ï—Å–ª–∏ —É—Å–ª—É–≥ –Ω–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫
        this.hideServicesSection();
        return;
    }

    var services = content.services.services;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —É—Å–ª—É–≥–∏
    var validServices = services.filter(service => service.title && service.description);
    
    if (validServices.length === 0) {
        this.hideServicesSection();
        return;
    }
    
    console.log('üéØ Applying services changes:', validServices.length, 'valid items');
    
    var serviceCards = document.querySelectorAll('.service-card');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —É—Å–ª—É–≥
    this.showServicesSection();
    
    if (serviceCards.length >= validServices.length) {
        validServices.forEach(function(service, index) {
            if (serviceCards[index]) {
                var titleElement = serviceCards[index].querySelector('h3');
                var descElement = serviceCards[index].querySelector('p');
                var iconElement = serviceCards[index].querySelector('.service-icon i');
                
                if (titleElement) titleElement.textContent = service.title;
                if (descElement) descElement.textContent = service.description;
                if (iconElement && service.icon) {
                    iconElement.className = service.icon;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
                serviceCards[index].style.display = 'block';
            }
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        for (var i = validServices.length; i < serviceCards.length; i++) {
            serviceCards[i].style.display = 'none';
        }
    }
};

ContentUpdater.prototype.hideServicesSection = function() {
    var servicesGrid = document.querySelector('.services-grid');
    if (servicesGrid) {
        servicesGrid.style.display = 'none';
    }
};

ContentUpdater.prototype.showServicesSection = function() {
    var servicesGrid = document.querySelector('.services-grid');
    if (servicesGrid) {
        servicesGrid.style.display = 'grid';
    }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
ContentUpdater.prototype.applyContentChanges = function(content) {
    if (!content) return;

    // Hero section
    if (content.hero) {
        this.updateElement('#home h1, .hero h1', content.hero.title);
        this.updateElement('#home p, .hero p', content.hero.subtitle);
    }

    // About section
    if (content.about) {
        this.updateElement('#about .section-title', content.about.title);
        this.updateElement('.about-text p', content.about.description);
    }

    // Services section
    if (content.services) {
        this.updateElement('#services .section-title', content.services.title);
    }

    // Destinations section
    if (content.destinations) {
        this.updateElement('#destinations .section-title', content.destinations.title);
        this.updateElement('.destinations .section-subtitle', content.destinations.subtitle);
    }

    // Contact section
    if (content.contact) {
        this.updateElement('#contact .section-title', content.contact.title);
    }

    // Footer section
    if (content.footer) {
        this.updateElement('.footer-section:first-child p', content.footer.description);
        this.updateElement('.footer-bottom p', content.footer.copyright, true);
    }
};

ContentUpdater.prototype.applyContactChanges = function(contacts) {
    if (!contacts) return;

    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if (contacts.phone) {
        this.updateElement('.contact-info .contact-item:nth-child(1) p', contacts.phone);
        this.updateElement('.footer-section:nth-child(3) p:nth-child(1)', contacts.phone);
    }
    if (contacts.email) {
        this.updateElement('.contact-info .contact-item:nth-child(2) p', contacts.email);
        this.updateElement('.footer-section:nth-child(3) p:nth-child(2)', contacts.email);
    }
    if (contacts.address) {
        this.updateElement('.contact-info .contact-item:nth-child(3) p', contacts.address);
        this.updateElement('.footer-section:nth-child(3) p:nth-child(3)', contacts.address);
    }
    if (contacts.hours) {
        this.updateElement('.contact-info .contact-item:nth-child(4) p', contacts.hours);
        this.updateElement('.footer-section:nth-child(3) p:nth-child(4)', contacts.hours);
    }
};

ContentUpdater.prototype.applySettingsChanges = function(settings) {
    if (!settings) return;

    if (settings.siteTitle) {
        document.title = settings.siteTitle;
    }
};

ContentUpdater.prototype.updateElement = function(selector, content, isHTML) {
    var elements = document.querySelectorAll(selector);
    if (elements.length > 0) {
        elements.forEach(function(element) {
            if (isHTML) {
                element.innerHTML = content;
            } else {
                element.textContent = content;
            }
        });
    }
};

ContentUpdater.prototype.getDataHash = function(data) {
    return JSON.stringify({
        content: data.content,
        contacts: data.contacts,
        settings: data.settings,
        timestamp: data.lastUpdate
    });
};

// Initialize enhanced content updater
var contentUpdater = new ContentUpdater();



=== FILE: ./index-clean-preview-fixed.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WorldTravel - Clean Preview</title>
    <style>
        body { 
            margin: 0; 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
        }
        .container {
            padding: 40px;
            max-width: 600px;
        }
        h1 {
            font-size: 2.5em;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        p {
            font-size: 1.2em;
            margin-bottom: 30px;
            opacity: 0.9;
        }
        .badge {
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 20px;
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>WorldTravel</h1>
        <p>–ß–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ</p>
        <div class="badge">‚úÖ –ë–µ–∑ blob –æ–ø–µ—Ä–∞—Ü–∏–π</div>
        <div class="badge" style="margin-top: 10px;">‚úÖ –ë–µ–∑ JavaScript –æ—à–∏–±–æ–∫</div>
        <div class="badge" style="margin-top: 10px;">‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞</div>
    </div>
    
    <!-- –ù–ò–ö–ê–ö–û–ì–û JavaScript - –∞–±—Å–æ–ª—é—Ç–Ω–æ —á–∏—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ -->
</body>
</html>



=== FILE: ./blob-url-fixer.js ===
// Blob URL Fixer - –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å Blob URL –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
function BlobUrlFixer() {
    this.fixedBlobs = new Set();
    this.init();
}

BlobUrlFixer.prototype.init = function() {
    console.log('üîß Blob URL Fixer initialized');
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Blob URL
    this.patchURLCreateObjectURL();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    this.monitorImageErrors();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Blob URL
    setInterval(() => this.cleanupUnusedBlobs(), 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
};

// –ü–∞—Ç—á–∏–º URL.createObjectURL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Blob URL
BlobUrlFixer.prototype.patchURLCreateObjectURL = function() {
    const originalCreateObjectURL = URL.createObjectURL;
    const self = this;
    
    URL.createObjectURL = function(blob) {
        const blobUrl = originalCreateObjectURL.call(this, blob);
        console.log('üì∏ Blob URL created:', blobUrl);
        self.fixedBlobs.add(blobUrl);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≤–æ–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        setTimeout(() => {
            if (self.fixedBlobs.has(blobUrl)) {
                try {
                    URL.revokeObjectURL(blobUrl);
                    self.fixedBlobs.delete(blobUrl);
                    console.log('üßπ Blob URL automatically revoked:', blobUrl);
                } catch (e) {
                    console.warn('‚ö†Ô∏è Could not auto-revoke blob URL:', e);
                }
            }
        }, 300000); // 5 –º–∏–Ω—É—Ç
        
        return blobUrl;
    };
};

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
BlobUrlFixer.prototype.monitorImageErrors = function() {
    document.addEventListener('error', (e) => {
        if (e.target.tagName === 'IMG') {
            const img = e.target;
            const src = img.src;
            
            if (src.startsWith('blob:')) {
                console.warn('‚ö†Ô∏è Blob URL image failed to load:', src);
                
                // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ placeholder —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ Blob URL
                this.replaceBrokenBlobImage(img, src);
            }
        }
    }, true);
};

// –ó–∞–º–µ–Ω—è–µ–º –±–∏—Ç–æ–µ Blob –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
BlobUrlFixer.prototype.replaceBrokenBlobImage = function(imgElement, blobUrl) {
    try {
        // –†–µ–≤–æ–∫–∞–µ–º –±–∏—Ç—ã–π Blob URL
        if (this.fixedBlobs.has(blobUrl)) {
            URL.revokeObjectURL(blobUrl);
            this.fixedBlobs.delete(blobUrl);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder
        imgElement.src = 'images/travel-placeholder.svg';
        imgElement.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
        imgElement.style.opacity = '0.7';
        
        console.log('üîÑ Replaced broken blob image with placeholder');
        
    } catch (error) {
        console.error('Error replacing broken blob image:', error);
    }
};

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Blob URL
BlobUrlFixer.prototype.cleanupUnusedBlobs = function() {
    const blobsToRemove = [];
    
    this.fixedBlobs.forEach(blobUrl => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –µ—â–µ —ç—Ç–æ—Ç Blob URL –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const isUsed = Array.from(document.images).some(img => img.src === blobUrl);
        
        if (!isUsed) {
            blobsToRemove.push(blobUrl);
        }
    });
    
    // –†–µ–≤–æ–∫–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ Blob URL
    blobsToRemove.forEach(blobUrl => {
        try {
            URL.revokeObjectURL(blobUrl);
            this.fixedBlobs.delete(blobUrl);
            console.log('üßπ Cleaned up unused blob URL:', blobUrl);
        } catch (e) {
            console.warn('‚ö†Ô∏è Could not cleanup blob URL:', e);
        }
    });
    
    if (blobsToRemove.length > 0) {
        console.log(`üßπ Cleaned up ${blobsToRemove.length} unused blob URLs`);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
window.addEventListener('error', function(e) {
    if (e.target.tagName === 'IMG' && e.target.src.startsWith('blob:')) {
        // –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Blob URL
        e.preventDefault();
        e.stopPropagation();
    }
}, true);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–∫—Å–µ—Ä–∞
new BlobUrlFixer();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.BlobUrlFixer = BlobUrlFixer;



=== FILE: ./super-editor.js ===
// Simple and Effective Super Editor
class SuperEditor {
    constructor() {
        this.init();
    }

    init() {
        console.log('üöÄ Super Editor initialized');
        this.waitForEditor();
    }

    waitForEditor() {
        if (window.editor) {
            this.patchEditor();
        } else {
            setTimeout(() => this.waitForEditor(), 100);
        }
    }

    patchEditor() {
        console.log('üîß Patching editor...');
        
        // Patch showContentEditor to add enhanced features
        const originalShowContentEditor = window.editor.showContentEditor;
        window.editor.showContentEditor = function() {
            originalShowContentEditor.call(this);
            setTimeout(() => this.addEnhancedFeatures(), 50);
        };

        // Add enhanced features method
        window.editor.addEnhancedFeatures = function() {
            this.addImageManager();
            this.addStatsManager();
            this.addServicesManager();
            this.addContactManager();
        };

        // Image Manager
        window.editor.addImageManager = function() {
            const imageFields = this.currentSection.fields?.filter(f => f.type === 'image');
            if (!imageFields || imageFields.length === 0) return;

            imageFields.forEach(field => {
                this.addImageField(field);
            });
        };

        window.editor.addImageField = function(field) {
            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            const existingManager = contentEditor.querySelector(`[data-image-field="${field.id}"]`);
            if (existingManager) return;

            const currentImage = this.getCurrentValue(field);
            const imageHTML = `
                <div class="form-group" data-image-field="${field.id}">
                    <label>${field.label}:</label>
                    <div class="image-manager" style="margin: 10px 0;">
                        <div class="image-preview" style="width: 100%; max-width: 300px; height: 200px; border: 2px dashed #ddd; border-radius: 8px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; overflow: hidden; background: #f8f9fa;">
                            ${currentImage ? 
                                `<img src="${currentImage}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;">` :
                                `<div style="text-align: center; color: #666;">
                                    <i class="fas fa-image" style="font-size: 2em; display: block; margin-bottom: 5px;"></i>
                                    <span>No image</span>
                                </div>`
                            }
                        </div>
                        <div style="display: flex; gap: 10px;">
                            <button type="button" class="btn-admin" onclick="window.editor.uploadImage('${field.id}')" style="background: #17a2b8;">
                                <i class="fas fa-upload"></i> Upload
                            </button>
                            <button type="button" class="btn-admin" onclick="window.editor.setImageUrl('${field.id}')" style="background: #6c757d;">
                                <i class="fas fa-link"></i> URL
                            </button>
                            ${currentImage ? `
                            <button type="button" class="btn-admin danger" onclick="window.editor.removeImage('${field.id}')" style="background: #dc3545;">
                                <i class="fas fa-trash"></i> Remove
                            </button>
                            ` : ''}
                        </div>
                        <input type="hidden" data-field="${field.id}" value="${currentImage || ''}">
                    </div>
                </div>
            `;

            // Insert after title field
            const titleField = contentEditor.querySelector('[data-field="title"]');
            if (titleField) {
                titleField.closest('.form-group').insertAdjacentHTML('afterend', imageHTML);
            }
        };

        // Image methods
        window.editor.uploadImage = function(fieldId) {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = 'image/*';
            input.onchange = (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        this.updateImageField(fieldId, e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
            };
            input.click();
        };

        window.editor.setImageUrl = function(fieldId) {
            const url = prompt('Enter image URL:');
            if (url) {
                this.updateImageField(fieldId, url);
            }
        };

        window.editor.removeImage = function(fieldId) {
            if (confirm('Remove image?')) {
                this.updateImageField(fieldId, '');
            }
        };

        window.editor.updateImageField = function(fieldId, url) {
            const field = document.querySelector(`[data-field="${fieldId}"]`);
            if (field) {
                field.value = url;
                
                const preview = document.querySelector(`[data-image-field="${fieldId}"] .image-preview`);
                if (preview) {
                    if (url) {
                        preview.innerHTML = `<img src="${url}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;">`;
                    } else {
                        preview.innerHTML = `
                            <div style="text-align: center; color: #666;">
                                <i class="fas fa-image" style="font-size: 2em; display: block; margin-bottom: 5px;"></i>
                                <span>No image</span>
                            </div>
                        `;
                    }
                }
                
                this.hasUnsavedChanges = true;
            }
        };

        // Stats Manager for About section
        window.editor.addStatsManager = function() {
            if (this.currentSection.id !== 'about') return;

            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            const stats = this.currentData.content?.about?.stats || [];
            
            const statsHTML = `
                <div class="stats-manager" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h4 style="color: #2c5aa0; margin-bottom: 15px;">üìä Statistics Blocks</h4>
                    <div id="stats-list">
                        ${stats.map((stat, index) => `
                            <div class="stat-item" style="display: flex; gap: 10px; margin-bottom: 10px; align-items: center;">
                                <input type="text" value="${stat.value}" placeholder="Value" 
                                       onchange="window.editor.updateStat(${index}, 'value', this.value)" 
                                       style="flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                <input type="text" value="${stat.label}" placeholder="Label" 
                                       onchange="window.editor.updateStat(${index}, 'label', this.value)"
                                       style="flex: 2; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                <button onclick="window.editor.removeStat(${index})" 
                                        style="background: #dc3545; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer;">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        `).join('')}
                    </div>
                    <button onclick="window.editor.addStat()" 
                            style="background: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                        <i class="fas fa-plus"></i> Add Statistic
                    </button>
                </div>
            `;

            const descriptionField = contentEditor.querySelector('[data-field="description"]');
            if (descriptionField) {
                descriptionField.closest('.form-group').insertAdjacentHTML('afterend', statsHTML);
            }
        };

        // Stats methods
        window.editor.addStat = function() {
            if (!this.currentData.content.about) this.currentData.content.about = {};
            if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
            
            this.currentData.content.about.stats.push({
                value: '0',
                label: 'New Stat'
            });
            
            this.hasUnsavedChanges = true;
            this.showContentEditor();
        };

        window.editor.updateStat = function(index, field, value) {
            if (!this.currentData.content.about) this.currentData.content.about = {};
            if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
            
            if (!this.currentData.content.about.stats[index]) {
                this.currentData.content.about.stats[index] = {};
            }
            
            this.currentData.content.about.stats[index][field] = value;
            this.hasUnsavedChanges = true;
        };

        window.editor.removeStat = function(index) {
            if (this.currentData.content?.about?.stats?.[index]) {
                this.currentData.content.about.stats.splice(index, 1);
                this.hasUnsavedChanges = true;
                this.showContentEditor();
            }
        };

        // Services Manager
        window.editor.addServicesManager = function() {
            if (this.currentSection.id !== 'services') return;

            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            const services = this.currentData.content?.services?.services || [];
            
            const servicesHTML = `
                <div class="services-manager" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h4 style="color: #2c5aa0; margin-bottom: 15px;">üéØ Services</h4>
                    <div id="services-list">
                        ${services.map((service, index) => `
                            <div class="service-item" style="margin-bottom: 15px; padding: 15px; background: white; border-radius: 6px; border: 1px solid #ddd;">
                                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                                    <input type="text" value="${service.title}" placeholder="Service Title" 
                                           onchange="window.editor.updateService(${index}, 'title', this.value)"
                                           style="flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                    <input type="text" value="${service.icon}" placeholder="Icon (fas fa-...)" 
                                           onchange="window.editor.updateService(${index}, 'icon', this.value)"
                                           style="flex: 1; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                                </div>
                                <textarea onchange="window.editor.updateService(${index}, 'description', this.value)"
                                          style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; resize: vertical; min-height: 60px;"
                                          placeholder="Service description">${service.description}</textarea>
                                <button onclick="window.editor.removeService(${index})" 
                                        style="background: #dc3545; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; margin-top: 10px;">
                                    <i class="fas fa-trash"></i> Remove Service
                                </button>
                            </div>
                        `).join('')}
                    </div>
                    <button onclick="window.editor.addService()" 
                            style="background: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer; margin-top: 10px;">
                        <i class="fas fa-plus"></i> Add Service
                    </button>
                </div>
            `;

            const titleField = contentEditor.querySelector('[data-field="title"]');
            if (titleField) {
                titleField.closest('.form-group').insertAdjacentHTML('afterend', servicesHTML);
            }
        };

        // Services methods
        window.editor.addService = function() {
            if (!this.currentData.content.services) this.currentData.content.services = {};
            if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
            
            this.currentData.content.services.services.push({
                title: 'New Service',
                description: 'Service description',
                icon: 'fas fa-star'
            });
            
            this.hasUnsavedChanges = true;
            this.showContentEditor();
        };

        window.editor.updateService = function(index, field, value) {
            if (!this.currentData.content.services) this.currentData.content.services = {};
            if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
            
            if (!this.currentData.content.services.services[index]) {
                this.currentData.content.services.services[index] = {};
            }
            
            this.currentData.content.services.services[index][field] = value;
            this.hasUnsavedChanges = true;
        };

        window.editor.removeService = function(index) {
            if (this.currentData.content?.services?.services?.[index]) {
                this.currentData.content.services.services.splice(index, 1);
                this.hasUnsavedChanges = true;
                this.showContentEditor();
            }
        };

        // Contact Manager
        window.editor.addContactManager = function() {
            if (this.currentSection.id !== 'contact') return;

            const contentEditor = document.getElementById('content-editor');
            if (!contentEditor) return;

            const contacts = this.currentData.contacts || {};
            
            const contactHTML = `
                <div class="contact-manager" style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h4 style="color: #2c5aa0; margin-bottom: 15px;">üìû Contact Information</h4>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div>
                            <label>Phone:</label>
                            <input type="text" value="${contacts.phone || ''}" 
                                   onchange="window.editor.updateContact('phone', this.value)"
                                   placeholder="+7 (999) 123-45-67"
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        </div>
                        <div>
                            <label>Email:</label>
                            <input type="email" value="${contacts.email || ''}" 
                                   onchange="window.editor.updateContact('email', this.value)"
                                   placeholder="info@worldtravel.com"
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        </div>
                        <div>
                            <label>Address:</label>
                            <input type="text" value="${contacts.address || ''}" 
                                   onchange="window.editor.updateContact('address', this.value)"
                                   placeholder="–ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15"
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        </div>
                        <div>
                            <label>Working Hours:</label>
                            <input type="text" value="${contacts.hours || ''}" 
                                   onchange="window.editor.updateContact('hours', this.value)"
                                   placeholder="–ü–Ω-–ü—Ç: 9:00-18:00"
                                   style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                        </div>
                    </div>
                </div>
            `;

            const titleField = contentEditor.querySelector('[data-field="title"]');
            if (titleField) {
                titleField.closest('.form-group').insertAdjacentHTML('afterend', contactHTML);
            }
        };

        // Contact methods
        window.editor.updateContact = function(field, value) {
            if (!this.currentData.contacts) this.currentData.contacts = {};
            this.currentData.contacts[field] = value;
            this.hasUnsavedChanges = true;
        };

        console.log('‚úÖ Editor patched successfully');
    }
}

// Initialize
new SuperEditor();



=== FILE: ./page-editor.css ===
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: #f5f5f5;
    height: 100vh;
}

.editor-container {
    display: flex;
    height: 100vh;
}

.preview-panel {
    flex: 1;
    background: white;
    border-right: 2px solid #e0e0e0;
    display: flex;
    flex-direction: column;
}

.preview-header {
    padding: 20px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #fafafa;
}

.page-preview {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
}

.editor-panel {
    width: 400px;
    background: white;
    border-left: 2px solid #e0e0e0;
    display: none;
    flex-direction: column;
}

.editor-panel.active {
    display: flex;
}

.editor-header {
    padding: 20px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #fafafa;
}

.editor-content {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
}

.editor-placeholder {
    text-align: center;
    color: #666;
    padding: 40px 20px;
}

.content-block {
    border: 2px solid transparent;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
}

.content-block:hover {
    border-color: #007bff;
    background: #f8f9fa;
}

.content-block.selected {
    border-color: #007bff;
    background: #e3f2fd;
}

.block-text {
    background: #f8f9fa;
}

.block-image {
    background: #fff3cd;
}

.block-hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 60px 20px;
    text-align: center;
}

.block-features {
    background: #d1ecf1;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
}

.block-cta {
    background: #d4edda;
    text-align: center;
    padding: 40px 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: #333;
}

.form-group input,
.form-group textarea,
.form-group select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
}

.form-group textarea {
    min-height: 100px;
    resize: vertical;
}

.image-upload {
    border: 2px dashed #ddd;
    padding: 20px;
    text-align: center;
    border-radius: 4px;
    cursor: pointer;
}

.image-upload:hover {
    border-color: #007bff;
}

.btn-primary {
    background: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.btn-primary:hover {
    background: #0056b3;
}

.btn-secondary {
    background: #6c757d;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.btn-secondary:hover {
    background: #545b62;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    z-index: 1000;
}

.modal.active {
    display: flex;
    justify-content: center;
    align-items: center;
}

.modal-content {
    background: white;
    padding: 0;
    border-radius: 8px;
    width: 500px;
    max-width: 90%;
}

.modal-header {
    padding: 20px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.modal-body {
    padding: 20px;
}

.block-preview {
    margin: 20px 0;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 4px;
}

.feature-item {
    background: white;
    padding: 15px;
    border-radius: 4px;
    text-align: center;
}

.close-modal {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
}

.form-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
    margin-top: 20px;
}



=== FILE: ./countries/armenia.html ===




=== FILE: ./enhanced-page-editor-fixed.js ===
// –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function EnhancedPageEditorFixed() {
    this.init();
}

EnhancedPageEditorFixed.prototype.init = function() {
    console.log('üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
    this.patchExistingEditor();
    this.injectEnhancedUI();
};

EnhancedPageEditorFixed.prototype.patchExistingEditor = function() {
    if (!window.editor) {
        setTimeout(() => this.patchExistingEditor(), 100);
        return;
    }

    console.log('üîß Patching editor methods...');

    // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ showContentEditor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
    const originalShowContentEditor = window.editor.showContentEditor;
    window.editor.showContentEditor = function() {
        originalShowContentEditor.call(this);
        setTimeout(() => {
            this.injectEnhancedEditors();
            this.injectImageManagers();
        }, 100);
    };

    // –ü–∞—Ç—á–∏–º –º–µ—Ç–æ–¥ saveChanges –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const originalSaveChanges = window.editor.saveChanges;
    window.editor.saveChanges = function() {
        this.saveEnhancedData();
        return originalSaveChanges.call(this);
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    window.editor.injectEnhancedEditors = function() {
        this.injectUnifiedStatsEditor();
        this.injectUnifiedServicesEditor();
        this.injectFooterEditor();
        this.injectContactsEditor();
    };

    // –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–û –∫–æ–º–ø–∞–Ω–∏–∏"
    window.editor.injectUnifiedStatsEditor = function() {
        if (this.currentSection?.id !== 'about') return;
        
        const contentEditor = document.getElementById('content-editor');
        if (!contentEditor) return;

        // –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldEditors = contentEditor.querySelectorAll('[class*="stats"], [class*="stat"]');
        oldEditors.forEach(editor => {
            if (editor.classList.contains('form-group') && !editor.querySelector('label')) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                return;
            }
            if (editor.closest('.action-buttons')) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                return;
            }
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if (editor.textContent.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫') || editor.textContent.includes('Stats') || 
                editor.classList.contains('stats-editor') || editor.classList.contains('stats-manager') ||
                editor.classList.contains('stats-editor-enhanced')) {
                editor.remove();
            }
        });

        const stats = this.currentData.content?.about?.stats || [];
        
        const statsHTML = `
            <div class="unified-stats-editor" style="background: #f8f9fa; padding: 25px; border-radius: 10px; margin: 25px 0; border: 2px solid #e9ecef;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h4 style="color: #2c5aa0; margin: 0;">üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π</h4>
                    <button class="btn-admin" onclick="window.editor.addStatData()" style="background: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>
                
                <div class="admin-hint" style="color: #666; margin-bottom: 20px; font-style: italic; background: white; padding: 12px; border-radius: 6px; border-left: 4px solid #2c5aa0;">
                    üí° –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.
                </div>
                
                <div id="unified-stats-list">
                    ${stats.length > 0 ? stats.map((stat, index) => `
                        <div class="stat-item-unified" style="display: grid; grid-template-columns: 1fr 1fr auto; gap: 12px; margin-bottom: 15px; align-items: center; padding: 15px; background: white; border-radius: 8px; border: 1px solid #e9ecef; transition: all 0.3s ease;">
                            <div>
                                <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">–ó–Ω–∞—á–µ–Ω–∏–µ</label>
                                <input type="text" class="form-control" value="${stat.value || ''}" placeholder="5000" 
                                       oninput="window.editor.updateStatData(${index}, 'value', this.value)" style="width: 100%;">
                            </div>
                            <div>
                                <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">–ü–æ–¥–ø–∏—Å—å</label>
                                <input type="text" class="form-control" value="${stat.label || ''}" placeholder="–î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤" 
                                       oninput="window.editor.updateStatData(${index}, 'label', this.value)" style="width: 100%;">
                            </div>
                            <button class="btn-small danger" onclick="window.editor.removeStatData(${index})" 
                                    style="background: #dc3545; color: white; border: none; padding: 10px 12px; border-radius: 6px; cursor: pointer; align-self: end;">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `).join('') : `
                        <div style="text-align: center; padding: 40px 20px; color: #666; background: white; border-radius: 8px; border: 2px dashed #ddd;">
                            <i class="fas fa-chart-bar" style="font-size: 3em; margin-bottom: 15px; display: block; color: #ccc;"></i>
                            <p>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞</p>
                            <small>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å</small>
                        </div>
                    `}
                </div>
                
                ${stats.length > 0 ? `
                <div class="stats-actions" style="display: flex; gap: 10px; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e9ecef;">
                    <button class="btn-admin" onclick="window.editor.addStatData()" style="background: #28a745; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; flex: 1;">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ
                    </button>
                    <button class="btn-admin warning" onclick="window.editor.clearAllStats()" style="background: #ffc107; color: black; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; flex: 1;">
                        <i class="fas fa-trash-alt"></i> –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                    </button>
                </div>
                ` : ''}
            </div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è
        const descriptionField = contentEditor.querySelector('[data-field="description"]');
        if (descriptionField) {
            descriptionField.closest('.form-group').insertAdjacentHTML('afterend', statsHTML);
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const titleField = contentEditor.querySelector('[data-field="title"]');
            if (titleField) {
                titleField.closest('.form-group').insertAdjacentHTML('afterend', statsHTML);
            }
        }
    };

    // –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô —Ä–µ–¥–∞–∫—Ç–æ—Ä —É—Å–ª—É–≥ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–£—Å–ª—É–≥–∏"
    window.editor.injectUnifiedServicesEditor = function() {
        if (this.currentSection?.id !== 'services') return;
        
        const contentEditor = document.getElementById('content-editor');
        if (!contentEditor) return;

        // –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã —É—Å–ª—É–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldEditors = contentEditor.querySelectorAll('[class*="service"], [class*="services"]');
        oldEditors.forEach(editor => {
            if (editor.classList.contains('form-group') && !editor.querySelector('label')) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                return;
            }
            if (editor.closest('.action-buttons')) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                return;
            }
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã —É—Å–ª—É–≥
            if (editor.textContent.includes('—É—Å–ª—É–≥') || editor.textContent.includes('Services') || 
                editor.classList.contains('services-editor') || editor.classList.contains('services-manager') ||
                editor.classList.contains('services-editor-enhanced')) {
                editor.remove();
            }
        });

        const services = this.currentData.content?.services?.services || [];
        
        const servicesHTML = `
            <div class="unified-services-editor" style="background: #f8f9fa; padding: 25px; border-radius: 10px; margin: 25px 0; border: 2px solid #e9ecef;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h4 style="color: #2c5aa0; margin: 0;">üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏</h4>
                    <button class="btn-admin" onclick="window.editor.addServiceData()" style="background: #28a745; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer;">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>
                
                <div class="admin-hint" style="color: #666; margin-bottom: 20px; font-style: italic; background: white; padding: 12px; border-radius: 6px; border-left: 4px solid #2c5aa0;">
                    üí° –î–æ–±–∞–≤–ª—è–π—Ç–µ —É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ö–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.
                </div>
                
                <div id="unified-services-list">
                    ${services.length > 0 ? services.map((service, index) => `
                        <div class="service-item-unified" style="margin-bottom: 20px; padding: 20px; background: white; border-radius: 8px; border: 1px solid #e9ecef; transition: all 0.3s ease;">
                            <div style="display: grid; grid-template-columns: 1fr 1fr auto; gap: 12px; margin-bottom: 15px; align-items: start;">
                                <div>
                                    <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</label>
                                    <input type="text" class="form-control" value="${service.title || ''}" placeholder="–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã" 
                                           oninput="window.editor.updateServiceData(${index}, 'title', this.value)" style="width: 100%;">
                                </div>
                                <div>
                                    <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">–ò–∫–æ–Ω–∫–∞</label>
                                    <input type="text" class="form-control" value="${service.icon || 'fas fa-star'}" placeholder="fas fa-plane" 
                                           oninput="window.editor.updateServiceData(${index}, 'icon', this.value)" style="width: 100%;">
                                </div>
                                <button class="btn-small danger" onclick="window.editor.removeServiceData(${index})" 
                                        style="background: #dc3545; color: white; border: none; padding: 10px 12px; border-radius: 6px; cursor: pointer; margin-top: 25px;">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div>
                                <label style="display: block; font-size: 12px; color: #666; margin-bottom: 5px;">–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</label>
                                <textarea class="form-control" placeholder="–ü–æ–¥–±–æ—Ä –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç–æ–≤..." 
                                          oninput="window.editor.updateServiceData(${index}, 'description', this.value)"
                                          style="width: 100%; min-height: 80px; resize: vertical;">${service.description || ''}</textarea>
                            </div>
                            ${service.icon ? `
                            <div style="margin-top: 10px; font-size: 12px; color: #666;">
                                <i class="${service.icon}" style="margin-right: 5px;"></i>
                                <span>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∫–æ–Ω–∫–∏</span>
                            </div>
                            ` : ''}
                        </div>
                    `).join('') : `
                        <div style="text-align: center; padding: 40px 20px; color: #666; background: white; border-radius: 8px; border: 2px dashed #ddd;">
                            <i class="fas fa-concierge-bell" style="font-size: 3em; margin-bottom: 15px; display: block; color: #ccc;"></i>
                            <p>–£—Å–ª—É–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                            <small>–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É</small>
                        </div>
                    `}
                </div>
                
                ${services.length > 0 ? `
                <div class="services-actions" style="display: flex; gap: 10px; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e9ecef;">
                    <button class="btn-admin" onclick="window.editor.addServiceData()" style="background: #28a745; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; flex: 1;">
                        <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ
                    </button>
                    <button class="btn-admin warning" onclick="window.editor.clearAllServices()" style="background: #ffc107; color: black; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; flex: 1;">
                        <i class="fas fa-trash-alt"></i> –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                    </button>
                </div>
                ` : ''}
            </div>
        `;

        const titleField = contentEditor.querySelector('[data-field="title"]');
        if (titleField) {
            titleField.closest('.form-group').insertAdjacentHTML('afterend', servicesHTML);
        }
    };

    // –†–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Ñ—É—Ç–µ—Ä–∞
    window.editor.injectFooterEditor = function() {
        if (this.currentSection?.id !== 'footer') return;
        
        const contentEditor = document.getElementById('content-editor');
        if (!contentEditor) return;

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—è —Ñ—É—Ç–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        const descriptionField = contentEditor.querySelector('[data-field="description"]');
        const copyrightField = contentEditor.querySelector('[data-field="copyright"]');
        
        if (descriptionField) {
            descriptionField.placeholder = "–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ñ—É—Ç–µ—Ä–µ...";
        }
        if (copyrightField) {
            copyrightField.placeholder = "–¢–µ–∫—Å—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: &copy; 2024 WorldTravel)...";
        }
    };

    // –†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    window.editor.injectContactsEditor = function() {
        if (this.currentSection?.id !== 'contact') return;
        
        const contentEditor = document.getElementById('content-editor');
        if (!contentEditor) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        const contactsInfoHTML = `
            <div class="contacts-management" style="background: #e3f2fd; padding: 20px; border-radius: 10px; margin: 25px 0; border-left: 4px solid #2196f3;">
                <h4 style="color: #1976d2; margin-bottom: 15px;">üìû –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</h4>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">
                    <div style="background: white; padding: 15px; border-radius: 6px;">
                        <h5 style="color: #333; margin-bottom: 10px;">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:</h5>
                        <ul style="color: #666; font-size: 0.9em; margin: 0; padding-left: 20px;">
                            <li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> +7 (999) 123-45-67</li>
                            <li><strong>Email:</strong> info@worldtravel.com</li>
                            <li><strong>–ê–¥—Ä–µ—Å:</strong> –ú–æ—Å–∫–≤–∞, —É–ª. –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è, 15</li>
                            <li><strong>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</strong> –ü–Ω-–ü—Ç: 9:00-18:00</li>
                        </ul>
                    </div>
                    <div style="background: white; padding: 15px; border-radius: 6px;">
                        <h5 style="color: #333; margin-bottom: 10px;">–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å:</h5>
                        <p style="color: #666; font-size: 0.9em; margin: 0;">
                            –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ‚Üí —Ä–∞–∑–¥–µ–ª "–ö–æ–Ω—Ç–∞–∫—Ç—ã" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
                        </p>
                    </div>
                </div>
            </div>
        `;

        const titleField = contentEditor.querySelector('[data-field="title"]');
        if (titleField) {
            titleField.closest('.form-group').insertAdjacentHTML('afterend', contactsInfoHTML);
        }
    };

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
    window.editor.injectImageManagers = function() {
        const contentEditor = document.getElementById('content-editor');
        if (!contentEditor) return;

        // –ù–∞—Ö–æ–¥–∏–º –í–°–ï –ø–æ–ª—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const imageFields = contentEditor.querySelectorAll('input[data-field*="image"], input[data-field*="Image"]');
        
        imageFields.forEach(field => {
            const fieldId = field.getAttribute('data-field');
            const currentValue = field.value;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
            if (field.parentNode.querySelector('.unified-image-manager')) {
                return;
            }

            const label = this.getImageFieldLabel(fieldId);
            const sectionType = this.getSectionTypeForImage(fieldId);
            
            const imageManagerHTML = `
                <div class="unified-image-manager" style="margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 10px; border: 2px solid #e9ecef;">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                        <div>
                            <strong style="color: #2c5aa0; font-size: 1.1em;">${label}</strong>
                            <div style="font-size: 0.9em; color: #666; margin-top: 5px;">
                                ${sectionType}
                            </div>
                        </div>
                        <div style="display: flex; gap: 8px;">
                            <button type="button" class="btn-admin" onclick="window.editor.uploadImage('${fieldId}')" 
                                    style="background: #17a2b8; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 0.9em;">
                                <i class="fas fa-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å
                            </button>
                            <button type="button" class="btn-admin" onclick="window.editor.setImageUrl('${fieldId}')" 
                                    style="background: #6c757d; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 0.9em;">
                                <i class="fas fa-link"></i> URL
                            </button>
                            ${currentValue ? `
                            <button type="button" class="btn-admin danger" onclick="window.editor.removeImage('${fieldId}')" 
                                    style="background: #dc3545; color: white; border: none; padding: 10px 15px; border-radius: 6px; cursor: pointer; font-size: 0.9em;">
                                <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                            </button>
                            ` : ''}
                        </div>
                    </div>
                    
                    <div class="image-preview-container" style="display: flex; gap: 20px; align-items: flex-start;">
                        <div class="image-preview" style="flex: 0 0 300px; height: 200px; border: 2px dashed #ddd; border-radius: 8px; display: flex; align-items: center; justify-content: center; overflow: hidden; background: white; transition: all 0.3s ease;">
                            ${currentValue ? 
                                `<img src="${currentValue}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;" 
                                      onerror="this.style.display='none'; this.parentNode.innerHTML='<div style=\\'text-align: center; color: #666; padding: 20px;\\'><i class=\\'fas fa-exclamation-triangle\\' style=\\'font-size: 2em; margin-bottom: 10px; color: #dc3545;\\'></i><div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div><small style=\\'font-size: 0.8em;\\'>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</small></div>';">` :
                                `<div style="text-align: center; color: #666; padding: 20px;">
                                    <i class="fas fa-image" style="font-size: 3em; display: block; margin-bottom: 10px; color: #ccc;"></i>
                                    <div>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</div>
                                    <small style="font-size: 0.8em;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</small>
                                </div>`
                            }
                        </div>
                        
                        <div style="flex: 1;">
                            ${currentValue ? `
                            <div style="background: white; padding: 15px; border-radius: 6px; margin-bottom: 10px;">
                                <strong style="display: block; margin-bottom: 8px; color: #333;">–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong>
                                <div style="font-size: 0.85em; color: #666; background: #f8f9fa; padding: 10px; border-radius: 4px; word-break: break-all;">
                                    ${currentValue.length > 80 ? currentValue.substring(0, 80) + '...' : currentValue}
                                </div>
                            </div>
                            ` : ''}
                            
                            <div style="background: #e7f3ff; padding: 12px; border-radius: 6px; border-left: 4px solid #2196f3;">
                                <strong style="display: block; margin-bottom: 5px; color: #1976d2;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                                <ul style="margin: 0; padding-left: 15px; font-size: 0.85em; color: #1565c0;">
                                    <li>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP</li>
                                    <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB</li>
                                    <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 16:9</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    
                    <input type="hidden" data-field="${fieldId}" value="${currentValue || ''}">
                </div>
            `;
            
            // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä
            const originalContainer = field.closest('.form-group');
            if (originalContainer) {
                originalContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            }
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (originalContainer) {
                originalContainer.insertAdjacentHTML('afterend', imageManagerHTML);
            } else {
                field.insertAdjacentHTML('afterend', imageManagerHTML);
            }
        });
    };

    window.editor.getImageFieldLabel = function(fieldId) {
        const labels = {
            'image': 'üì∑ –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'heroImage': 'üéØ –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ—Ä–æ—è',
            'aboutImage': 'üè¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏',
            'serviceImage': '‚ö° –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª—É–≥–∏'
        };
        return labels[fieldId] || 'üñºÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º';
    };

    window.editor.getSectionTypeForImage = function(fieldId) {
        const sections = {
            'image': '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏',
            'heroImage': '–§–æ–Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞',
            'aboutImage': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏ "–û –∫–æ–º–ø–∞–Ω–∏–∏"',
            'serviceImage': '–ò–∫–æ–Ω–∫–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å–ª—É–≥'
        };
        return sections[fieldId] || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏';
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    window.editor.addStatData = function() {
        if (!this.currentData.content.about) this.currentData.content.about = {};
        if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
        
        this.currentData.content.about.stats.push({ 
            value: '0', 
            label: '–ù–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å' 
        });
        
        this.hasUnsavedChanges = true;
        this.injectUnifiedStatsEditor();
        this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    };

    window.editor.updateStatData = function(index, field, value) {
        if (!this.currentData.content.about) this.currentData.content.about = {};
        if (!this.currentData.content.about.stats) this.currentData.content.about.stats = [];
        
        if (!this.currentData.content.about.stats[index]) {
            this.currentData.content.about.stats[index] = {};
        }
        
        this.currentData.content.about.stats[index][field] = value;
        this.hasUnsavedChanges = true;
    };

    window.editor.removeStatData = function(index) {
        if (this.currentData.content?.about?.stats?.[index]) {
            this.currentData.content.about.stats.splice(index, 1);
            this.hasUnsavedChanges = true;
            this.injectUnifiedStatsEditor();
            this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
    };

    window.editor.clearAllStats = function() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            if (this.currentData.content?.about?.stats) {
                this.currentData.content.about.stats = [];
                this.hasUnsavedChanges = true;
                this.injectUnifiedStatsEditor();
                this.showNotification('–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
            }
        }
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Å–ª—É–≥–∞–º–∏
    window.editor.addServiceData = function() {
        if (!this.currentData.content.services) this.currentData.content.services = {};
        if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
        
        this.currentData.content.services.services.push({ 
            title: '–ù–æ–≤–∞—è —É—Å–ª—É–≥–∞', 
            description: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏',
            icon: 'fas fa-star'
        });
        
        this.hasUnsavedChanges = true;
        this.injectUnifiedServicesEditor();
        this.showNotification('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
    };

    window.editor.updateServiceData = function(index, field, value) {
        if (!this.currentData.content.services) this.currentData.content.services = {};
        if (!this.currentData.content.services.services) this.currentData.content.services.services = [];
        
        if (!this.currentData.content.services.services[index]) {
            this.currentData.content.services.services[index] = {};
        }
        
        this.currentData.content.services.services[index][field] = value;
        this.hasUnsavedChanges = true;
    };

    window.editor.removeServiceData = function(index) {
        if (this.currentData.content?.services?.services?.[index]) {
            this.currentData.content.services.services.splice(index, 1);
            this.hasUnsavedChanges = true;
            this.injectUnifiedServicesEditor();
            this.showNotification('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
        }
    };

    window.editor.clearAllServices = function() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            if (this.currentData.content?.services?.services) {
                this.currentData.content.services.services = [];
                this.hasUnsavedChanges = true;
                this.injectUnifiedServicesEditor();
                this.showNotification('–í—Å–µ —É—Å–ª—É–≥–∏ –æ—á–∏—â–µ–Ω—ã', 'success');
            }
        }
    };

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    window.editor.uploadImage = function(fieldId) {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (e) => {
            const file = e.target.files[0];
            if (file) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB', 'error');
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                if (!file.type.startsWith('image/')) {
                    this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    this.updateImageField(fieldId, e.target.result);
                    this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'success');
                };
                reader.onerror = () => {
                    this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
                };
                reader.readAsDataURL(file);
            }
        };
        input.click();
    };

    window.editor.setImageUrl = function(fieldId) {
        const currentValue = this.getCurrentImageValue(fieldId);
        const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', currentValue || '');
        if (url !== null) {
            if (url === '') {
                this.removeImage(fieldId);
            } else if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('data:image') || url.startsWith('images/')) {
                this.updateImageField(fieldId, url);
                this.showNotification('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
            } else {
                this.showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            }
        }
    };

    window.editor.removeImage = function(fieldId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?')) {
            this.updateImageField(fieldId, '');
            this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'success');
        }
    };

    window.editor.getCurrentImageValue = function(fieldId) {
        const field = document.querySelector(`[data-field="${fieldId}"]`);
        return field ? field.value : '';
    };

    window.editor.updateImageField = function(fieldId, url) {
        const field = document.querySelector(`[data-field="${fieldId}"]`);
        if (field) {
            field.value = url;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const manager = document.querySelector(`.unified-image-manager input[data-field="${fieldId}"]`)?.closest('.unified-image-manager');
            if (manager) {
                const preview = manager.querySelector('.image-preview');
                const currentImageInfo = manager.querySelector('.image-preview-container > div:last-child > div:first-child');
                
                if (preview) {
                    if (url) {
                        preview.innerHTML = `<img src="${url}" alt="Preview" style="max-width: 100%; max-height: 100%; object-fit: cover;" 
                                                  onerror="this.style.display='none'; this.parentNode.innerHTML='<div style=\\'text-align: center; color: #666; padding: 20px;\\'><i class=\\'fas fa-exclamation-triangle\\' style=\\'font-size: 2em; margin-bottom: 10px; color: #dc3545;\\'></i><div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div><small style=\\'font-size: 0.8em;\\'>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</small></div>';">`;
                    } else {
                        preview.innerHTML = `
                            <div style="text-align: center; color: #666; padding: 20px;">
                                <i class="fas fa-image" style="font-size: 3em; display: block; margin-bottom: 10px; color: #ccc;"></i>
                                <div>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</div>
                                <small style="font-size: 0.8em;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</small>
                            </div>
                        `;
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                if (currentImageInfo) {
                    if (url) {
                        currentImageInfo.innerHTML = `
                            <strong style="display: block; margin-bottom: 8px; color: #333;">–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong>
                            <div style="font-size: 0.85em; color: #666; background: #f8f9fa; padding: 10px; border-radius: 4px; word-break: break-all;">
                                ${url.length > 80 ? url.substring(0, 80) + '...' : url}
                            </div>
                        `;
                        currentImageInfo.style.display = 'block';
                    } else {
                        currentImageInfo.style.display = 'none';
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                const buttonsContainer = manager.querySelector('div:first-child div:last-child');
                if (buttonsContainer) {
                    const deleteBtn = buttonsContainer.querySelector('.btn-admin.danger');
                    if (url) {
                        if (!deleteBtn) {
                            const newDeleteBtn = document.createElement('button');
                            newDeleteBtn.className = 'btn-admin danger';
                            newDeleteBtn.style.background = '#dc3545';
                            newDeleteBtn.style.color = 'white';
                            newDeleteBtn.style.border = 'none';
                            newDeleteBtn.style.padding = '10px 15px';
                            newDeleteBtn.style.borderRadius = '6px';
                            newDeleteBtn.style.cursor = 'pointer';
                            newDeleteBtn.style.fontSize = '0.9em';
                            newDeleteBtn.innerHTML = '<i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å';
                            newDeleteBtn.onclick = () => this.removeImage(fieldId);
                            buttonsContainer.appendChild(newDeleteBtn);
                        }
                    } else {
                        if (deleteBtn) {
                            deleteBtn.remove();
                        }
                    }
                }
            }
            
            this.hasUnsavedChanges = true;
        }
    };

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    window.editor.saveEnhancedData = function() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.currentSection?.id === 'about') {
            this.saveStatsData();
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏
        if (this.currentSection?.id === 'services') {
            this.saveServicesData();
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É—Ç–µ—Ä
        if (this.currentSection?.id === 'footer') {
            this.saveFooterData();
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–ª—è)
        this.saveImageData();
    };

    window.editor.saveStatsData = function() {
        if (this.currentSection?.id !== 'about') return;
        
        const statsList = document.getElementById('unified-stats-list');
        if (!statsList) return;

        const statItems = statsList.querySelectorAll('.stat-item-unified');
        const stats = [];

        statItems.forEach(item => {
            const inputs = item.querySelectorAll('input');
            if (inputs.length >= 2) {
                const value = inputs[0].value.trim();
                const label = inputs[1].value.trim();
                if (value && label) {
                    stats.push({
                        value: value,
                        label: label
                    });
                }
            }
        });

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats);
        
        if (!this.currentData.content.about) {
            this.currentData.content.about = {};
        }
        this.currentData.content.about.stats = stats;
    };

    window.editor.saveServicesData = function() {
        if (this.currentSection?.id !== 'services') return;
        
        const servicesList = document.getElementById('unified-services-list');
        if (!servicesList) return;

        const serviceItems = servicesList.querySelectorAll('.service-item-unified');
        const services = [];

        serviceItems.forEach(item => {
            const titleInput = item.querySelector('input[placeholder="–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã"]');
            const iconInput = item.querySelector('input[placeholder="fas fa-plane"]');
            const descTextarea = item.querySelector('textarea');
            
            if (titleInput && descTextarea) {
                const title = titleInput.value.trim();
                const description = descTextarea.value.trim();
                const icon = iconInput ? iconInput.value.trim() : 'fas fa-star';
                
                if (title && description) {
                    services.push({
                        title: title,
                        description: description,
                        icon: icon
                    });
                }
            }
        });

        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥:', services);
        
        if (!this.currentData.content.services) {
            this.currentData.content.services = {};
        }
        this.currentData.content.services.services = services;
    };

    window.editor.saveFooterData = function() {
        if (this.currentSection?.id !== 'footer') return;
        
        const descriptionField = document.querySelector('[data-field="description"]');
        const copyrightField = document.querySelector('[data-field="copyright"]');
        
        if (descriptionField && this.currentData.footer) {
            this.currentData.footer.description = descriptionField.value;
        }
        if (copyrightField && this.currentData.footer) {
            this.currentData.footer.copyright = copyrightField.value;
        }
        
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É—Ç–µ—Ä–∞:', this.currentData.footer);
    };

    window.editor.saveImageData = function() {
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        console.log('üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–æ–ª—è —Ñ–æ—Ä–º—ã');
    };
};

EnhancedPageEditorFixed.prototype.injectEnhancedUI = function() {
    // –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const style = document.createElement('style');
    style.textContent = `
        .unified-stats-editor,
        .unified-services-editor,
        .unified-image-manager {
            transition: all 0.3s ease;
        }
        
        .stat-item-unified:hover,
        .service-item-unified:hover {
            border-color: #2c5aa0 !important;
            background: #f8f9fa !important;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        .unified-image-manager:hover {
            border-color: #2c5aa0 !important;
        }
        
        .image-preview:hover {
            border-color: #2c5aa0 !important;
        }
        
        .contacts-management {
            transition: all 0.3s ease;
        }
        
        @media (max-width: 768px) {
            .stat-item-unified {
                grid-template-columns: 1fr !important;
                gap: 10px !important;
            }
            
            .unified-image-manager .image-preview-container {
                flex-direction: column !important;
            }
            
            .unified-image-manager .image-preview {
                flex: none !important;
                width: 100% !important;
                max-width: 300px !important;
            }
        }
    `;
    document.head.appendChild(style);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
new EnhancedPageEditorFixed();



=== FILE: ./admin-real.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - WorldTravel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .admin-header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: white;
        }

        .admin-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 30px;
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .admin-welcome {
            font-size: 24px;
            margin-bottom: 10px;
            color: white;
        }

        .logout-btn {
            background: rgba(231, 76, 60, 0.8);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            cursor: pointer;
            transition: 0.3s;
        }

        .logout-btn:hover {
            background: rgba(231, 76, 60, 1);
        }

        .admin-section {
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }

        .section-title {
            color: white;
            margin-bottom: 15px;
            font-size: 20px;
        }

        .country-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .country-info h4 {
            margin-bottom: 5px;
            color: #fff;
        }

        .country-actions button {
            background: rgba(52, 152, 219, 0.8);
            border: none;
            color: white;
            padding: 8px 15px;
            margin-left: 10px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        .country-actions button:hover {
            background: rgba(52, 152, 219, 1);
        }

        .country-actions button.delete {
            background: rgba(231, 76, 60, 0.8);
        }

        .country-actions button.delete:hover {
            background: rgba(231, 76, 60, 1);
        }

        .add-country-form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .add-country-form input {
            flex: 1;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: rgba(255, 255, 255, 0.9);
        }

        .add-country-form button {
            background: rgba(46, 204, 113, 0.8);
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: 0.3s;
        }

        .add-country-form button:hover {
            background: rgba(46, 204, 113, 1);
        }

        .message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            text-align: center;
            font-weight: bold;
        }

        .message.success {
            background: rgba(46, 204, 113, 0.2);
            color: #2ecc71;
            border: 1px solid #2ecc71;
        }

        .message.error {
            background: rgba(231, 76, 60, 0.2);
            color: #e74c3c;
            border: 1px solid #e74c3c;
        }
    </style>
</head>
<body>
    <div class="admin-header">
        <div>
            <h1 class="admin-welcome">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WorldTravel</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å–∞–π—Ç–∞</p>
        </div>
        <button class="logout-btn" onclick="logout()">–í—ã–π—Ç–∏</button>
    </div>

    <div class="admin-container">
        <div class="admin-section">
            <h2 class="section-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏</h2>
            
            <div class="add-country-form">
                <input type="text" id="countryName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã">
                <input type="text" id="countryDesc" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã">
                <button onclick="addCountry()">–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω—É</button>
            </div>

            <div id="countriesList">
                <!-- –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –±—É–¥–µ—Ç –∑–¥–µ—Å—å -->
            </div>
        </div>

        <div class="admin-section">
            <h2 class="section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div style="color: white;">
                <p>–°—Ç—Ä–∞–Ω –≤ –±–∞–∑–µ: <span id="countriesCount">0</span></p>
                <p>–ì–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ: <span id="citiesCount">0</span></p>
            </div>
        </div>
    </div>

    <div id="message" class="message"></div>

    <script>
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï–¢ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        document.addEventListener('DOMContentLoaded', function() {
            const isAuthenticated = localStorage.getItem('adminAuthenticated');
            console.log('Auth check:', isAuthenticated);
            
            // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
          //  if (!isAuthenticated || isAuthenticated !== 'true') {
            //    console.log('Redirecting to login...');
              //  window.location.href = 'admin-login.html';
            //} else {
                console.log('Access granted to admin panel');
                loadCountries();
                updateStats();
            }
        );

        function logout() {
            localStorage.removeItem('adminAuthenticated');
            localStorage.removeItem('adminUsername');
            localStorage.removeItem('authTime');
            window.location.href = 'admin-login.html';
        }

        function showMessage(text, type) {
            const messageEl = document.getElementById('message');
            messageEl.textContent = text;
            messageEl.className = 'message ' + type;
            
            setTimeout(() => {
                messageEl.textContent = '';
                messageEl.className = 'message';
            }, 3000);
        }

        async function loadCountries() {
            try {
                // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ LocalStorage
                const savedData = localStorage.getItem('travelData');
                let countries = [];
                
                if (savedData) {
                    const data = JSON.parse(savedData);
                    countries = data.countries || [];
                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ LocalStorage, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
                    const response = await fetch('./data/content.json');
                    if (response.ok) {
                        const data = await response.json();
                        countries = data.countries || [];
                    }
                }
                
                displayCountries(countries);
                updateStats();
            } catch (error) {
                console.error('Error loading countries:', error);
                showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
            }
        }

        function displayCountries(countries) {
            const container = document.getElementById('countriesList');
            
            if (countries.length === 0) {
                container.innerHTML = '<p style="color: white; text-align: center;">–°—Ç—Ä–∞–Ω –ø–æ–∫–∞ –Ω–µ—Ç</p>';
                return;
            }
            
            container.innerHTML = countries.map(country => `
                <div class="country-item">
                    <div class="country-info">
                        <h4>${country.name}</h4>
                        <p>${country.description}</p>
                    </div>
                    <div class="country-actions">
                        <button onclick="editCountry(${country.id})">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                        <button class="delete" onclick="deleteCountry(${country.id})">–£–¥–∞–ª–∏—Ç—å</button>
                    </div>
                </div>
            `).join('');
        }

        function addCountry() {
            const name = document.getElementById('countryName').value;
            const desc = document.getElementById('countryDesc').value;
            
            if (!name || !desc) {
                showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            const savedData = localStorage.getItem('travelData');
            let data = savedData ? JSON.parse(savedData) : { countries: [], cities: [] };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É
            const newId = data.countries.length > 0 ? Math.max(...data.countries.map(c => c.id)) + 1 : 1;
            
            data.countries.push({
                id: newId,
                name: name,
                description: desc,
                image: "images/travel-placeholder.jpg"
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            localStorage.setItem('travelData', JSON.stringify(data));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            displayCountries(data.countries);
            updateStats();
            showMessage('–°—Ç—Ä–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            document.getElementById('countryName').value = '';
            document.getElementById('countryDesc').value = '';
        }

        function editCountry(id) {
            const savedData = localStorage.getItem('travelData');
            if (!savedData) return;
            
            const data = JSON.parse(savedData);
            const country = data.countries.find(c => c.id === id);
            
            if (country) {
                const newName = prompt('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:', country.name);
                const newDesc = prompt('–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', country.description);
                
                if (newName && newDesc) {
                    country.name = newName;
                    country.description = newDesc;
                    localStorage.setItem('travelData', JSON.stringify(data));
                    displayCountries(data.countries);
                    showMessage('–°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
                }
            }
        }

        function deleteCountry(id) {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–∞–Ω—É?')) return;
            
            const savedData = localStorage.getItem('travelData');
            if (!savedData) return;
            
            const data = JSON.parse(savedData);
            data.countries = data.countries.filter(c => c.id !== id);
            
            localStorage.setItem('travelData', JSON.stringify(data));
            displayCountries(data.countries);
            updateStats();
            showMessage('–°—Ç—Ä–∞–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success');
        }

        function updateStats() {
            const savedData = localStorage.getItem('travelData');
            let countriesCount = 0;
            let citiesCount = 0;
            
            if (savedData) {
                const data = JSON.parse(savedData);
                countriesCount = data.countries ? data.countries.length : 0;
                citiesCount = data.cities ? data.cities.length : 0;
            }
            
            document.getElementById('countriesCount').textContent = countriesCount;
            document.getElementById('citiesCount').textContent = citiesCount;
        }
    </script>
</body>
</html>


