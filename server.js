const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();
const PORT = 3001; // –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –ø–æ—Ä—Ç 3001

// ‚úÖ COMPLETE CORS SOLUTION
app.use((req, res, next) => {
    const allowedOrigins = [
        'http://127.0.0.1:5500', 
        'http://localhost:3001', 
        'http://localhost:5500',
        'http://127.0.0.1:3001'
    ];
    const origin = req.headers.origin;
    
    if (allowedOrigins.includes(origin)) {
        res.header('Access-Control-Allow-Origin', origin);
    } else {
        res.header('Access-Control-Allow-Origin', '*');
    }
    
    res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Headers');
    res.header('Access-Control-Allow-Credentials', 'true');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).json({});
    }
    
    next();
});

// Middleware
app.use(express.json());
app.use(express.static('.')); // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω—è

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
}

// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
app.post('/api/save-data', (req, res) => {
    try {
        const data = req.body;
        console.log('üíæ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
            countries: data.countries?.length || 0,
            content: data.content ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
            design: data.design ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
        });
        
        // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        res.json({ 
            success: true, 
            message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
            received: {
                countries: data.countries?.length || 0,
                timestamp: new Date().toISOString()
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message 
        });
    }
});

app.get('/api/load-data', (req, res) => {
    try {
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
        const filePath = path.join(__dirname, 'data', 'content.json');
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            res.json(JSON.parse(data));
        } else {
            res.json({ 
                countries: [], 
                content: {},
                design: {},
                blocks: {},
                lastUpdate: null 
            });
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        res.status(500).json({ 
            success: false, 
            message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' 
        });
    }
});

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
app.get('/api/load-data', (req, res) => {
    try {
        const filePath = path.join(__dirname, 'data', 'content.json');
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            const parsedData = JSON.parse(data);
            console.log('üìÅ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞:', parsedData.countries?.length, '—Å—Ç—Ä–∞–Ω');
            res.json(parsedData);
        } else {
            console.log('üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ');
            res.json({ countries: [], content: {}, lastUpdate: null });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏' });
    }
});

// API –¥–ª—è –≤—Ö–æ–¥–∞
app.post('/api/login', (req, res) => {
    try {
        const { username, password } = req.body;
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', username);
        
        if (username === 'admin' && password === 'WorldTravel2024!') {
            const code = Math.floor(100000 + Math.random() * 900000).toString();
            
            // –õ–æ–≥–∏—Ä—É–µ–º "–æ—Ç–ø—Ä–∞–≤–∫—É" email
            console.log('='.repeat(50));
            console.log('üìß EMAIL –û–¢–ü–†–ê–í–õ–ï–ù –ù–ê: narekgrigoryan424@gmail.com');
            console.log('üîê –ö–û–î –î–õ–Ø –í–•–û–î–ê:', code);
            console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toLocaleString());
            console.log('='.repeat(50));
            
            res.json({
                success: true,
                message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email',
                debug_code: code,
                requires2FA: true
            });
        } else {
            res.status(401).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA
app.post('/api/verify-2fa', (req, res) => {
    try {
        const { username, code } = req.body;
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA:', username, code);
        
        // –î–ª—è –¥–µ–º–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        if (code && code.length === 6) {
            const sessionId = 'admin_session_' + Date.now();
            res.json({
                success: true,
                message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                sessionId: sessionId
            });
        } else {
            res.status(401).json({
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –∫–æ–¥–æ–º 2FA (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
app.post('/api/send-2fa-email', (req, res) => {
    try {
        const { email, code } = req.body;
        
        console.log('='.repeat(50));
        console.log('üìß –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò EMAIL:');
        console.log('   –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', email);
        console.log('   –ö–æ–¥ 2FA:', code);
        console.log('   –í—Ä–µ–º—è:', new Date().toLocaleString());
        console.log('='.repeat(50));
        
        res.json({
            success: true,
            message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email',
            debug: {
                email: email,
                code: code,
                timestamp: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email' });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
app.post('/api/verify-session', (req, res) => {
    try {
        const { sessionId } = req.body;
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:', sessionId);
        
        // –î–ª—è –¥–µ–º–æ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ sessionId
        if (sessionId && sessionId.startsWith('admin_session_')) {
            res.json({
                success: true,
                message: '–°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞',
                user: { username: 'admin' }
            });
        } else {
            res.status(401).json({
                success: false,
                message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è'
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
app.get('/api/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'Server is running on port 3001!',
        port: PORT,
        timestamp: new Date().toISOString()
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/current-data', (req, res) => {
    try {
        const filePath = path.join(__dirname, 'data', 'content.json');
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            const parsedData = JSON.parse(data);
            res.json(parsedData);
        } else {
            res.json({ 
                countries: [], 
                content: {},
                settings: {},
                design: {},
                lastUpdate: null 
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});
// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–æ–±–∞–≤—å—Ç–µ –≤ server.js)
app.get('/api/current-data', (req, res) => {
    try {
        const filePath = path.join(__dirname, 'data', 'content.json');
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');
            const parsedData = JSON.parse(data);
            res.json(parsedData);
        } else {
            res.json({ 
                countries: [], 
                content: {},
                settings: {},
                design: {},
                lastUpdate: null 
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö' });
    }
});
// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö HTML —Å—Ç—Ä–∞–Ω–∏—Ü
app.get('*', (req, res) => {
    const filePath = req.path === '/' ? '/index.html' : req.path;
    const fullPath = path.join(__dirname, filePath);
    
    if (fs.existsSync(fullPath) && fullPath.endsWith('.html')) {
        res.sendFile(fullPath);
    } else {
        res.status(404).send('Page not found');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ä—Ç–∞
app.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
        console.log('='.repeat(50));
        console.log('‚ùå –û–®–ò–ë–ö–ê: –ü–æ—Ä—Ç 3001 —É–∂–µ –∑–∞–Ω—è—Ç!');
        console.log('üîÑ –†–µ—à–µ–Ω–∏–µ:');
        console.log('   –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:');
        console.log('   lsof -ti:3001 | xargs kill -9');
        console.log('   –∏–ª–∏');
        console.log('   pkill -f "node server.js"');
        console.log('='.repeat(50));
        process.exit(1);
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å:', reason);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001
app.listen(PORT, '0.0.0.0', () => {
    console.log('='.repeat(60));
    console.log('üöÄ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ 3001!');
    console.log('='.repeat(60));
    console.log('üìç –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:');
    console.log(`   http://localhost:${PORT}`);
    console.log('');
    console.log('üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:');
    console.log(`   http://localhost:${PORT}/admin-login.html`);
    console.log(`   http://localhost:${PORT}/admin.html`);
    console.log('');
    console.log('üë§ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    console.log('   –õ–æ–≥–∏–Ω: admin');
    console.log('   –ü–∞—Ä–æ–ª—å: WorldTravel2024!');
    console.log('');
    console.log('üìß 2FA –∫–æ–¥—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('');
    console.log('‚ö° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: Ctrl + C');
    console.log('='.repeat(60));
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('');
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('');
    console.log('üõë –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...');
    process.exit(0);
});