// Blob Error Suppressor - –ø–æ–¥–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ Blob URL –≤ –∫–æ–Ω—Å–æ–ª–∏
function BlobErrorSuppressor() {
    this.suppressedErrors = new Set();
    this.init();
}

BlobErrorSuppressor.prototype.init = function() {
    console.log('üîá Blob Error Suppressor initialized');
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º console.error
    this.patchConsoleError();
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    this.patchGlobalErrorHandler();
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ Blob URL
    this.cleanupExistingBlobUrls();
};

BlobErrorSuppressor.prototype.patchConsoleError = function() {
    const originalConsoleError = console.error;
    const self = this;
    
    console.error = function(...args) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å Blob URL
        const message = args[0];
        if (typeof message === 'string') {
            // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ WebKitBlobResource
            if (message.includes('WebKitBlobResource') || 
                message.includes('Failed to load resource') ||
                (message.includes('blob:') && message.includes('Failed to load'))) {
                
                const blobUrl = args[1];
                if (blobUrl && typeof blobUrl === 'string' && blobUrl.startsWith('blob:')) {
                    if (!self.suppressedErrors.has(blobUrl)) {
                        self.suppressedErrors.add(blobUrl);
                        console.warn('‚ö†Ô∏è Suppressed blob URL error:', blobUrl);
                    }
                    return; // –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
                }
            }
            
            // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å Blob URL
            if (message.includes('Failed to load image') && 
                args[1] && typeof args[1] === 'string' && args[1].startsWith('blob:')) {
                
                const blobUrl = args[1];
                if (!self.suppressedErrors.has(blobUrl)) {
                    self.suppressedErrors.add(blobUrl);
                    console.warn('‚ö†Ô∏è Suppressed image load error for blob URL');
                }
                return;
            }
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.error
        originalConsoleError.apply(console, args);
    };
};

BlobErrorSuppressor.prototype.patchGlobalErrorHandler = function() {
    const self = this;
    
    window.addEventListener('error', function(e) {
        if (e.target && e.target.tagName === 'IMG') {
            const img = e.target;
            if (img.src && img.src.startsWith('blob:')) {
                // –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
                e.preventDefault();
                e.stopPropagation();
                
                if (!self.suppressedErrors.has(img.src)) {
                    self.suppressedErrors.add(img.src);
                    console.warn('‚ö†Ô∏è Suppressed image error for blob URL:', img.src);
                }
                
                // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ placeholder
                img.src = 'images/travel-placeholder.svg';
                return false;
            }
        }
    }, true);
};

BlobErrorSuppressor.prototype.cleanupExistingBlobUrls = function() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Blob URL –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö
    document.querySelectorAll('img[src^="blob:"]').forEach(img => {
        try {
            URL.revokeObjectURL(img.src);
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–≤–æ–∫–∞
        }
        img.src = 'images/travel-placeholder.svg';
    });
    
    // –û—á–∏—â–∞–µ–º Blob URL –∏–∑ localStorage
    this.cleanupBlobUrlsFromStorage();
};

BlobErrorSuppressor.prototype.cleanupBlobUrlsFromStorage = function() {
    try {
        const data = localStorage.getItem('worldtravel_data');
        if (data) {
            const parsed = JSON.parse(data);
            let needsUpdate = false;
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º Blob URL
            const replaceBlobUrls = (obj) => {
                if (!obj || typeof obj !== 'object') return;
                
                Object.keys(obj).forEach(key => {
                    const value = obj[key];
                    if (typeof value === 'string' && value.startsWith('blob:')) {
                        obj[key] = 'images/travel-placeholder.svg';
                        needsUpdate = true;
                    } else if (typeof value === 'object') {
                        replaceBlobUrls(value);
                    }
                });
            };
            
            replaceBlobUrls(parsed);
            
            if (needsUpdate) {
                localStorage.setItem('worldtravel_data', JSON.stringify(parsed));
                console.log('‚úÖ Cleaned blob URLs from localStorage');
            }
        }
    } catch (e) {
        console.warn('‚ö†Ô∏è Could not cleanup blob URLs from storage:', e);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∞–≤–∏—Ç–µ–ª—è –æ—à–∏–±–æ–∫
new BlobErrorSuppressor();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.BlobErrorSuppressor = BlobErrorSuppressor;
